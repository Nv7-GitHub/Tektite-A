
Tektite-A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008560  08008560  00009560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c8  080085c8  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  080085c8  080085c8  000095c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085d0  080085d0  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085d0  080085d0  000095d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085d4  080085d4  000095d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080085d8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d34  200000fc  080086d4  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e30  080086d4  0000ae30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015236  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003568  00000000  00000000  0001f362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  000228d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eff  00000000  00000000  00023c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a61a  00000000  00000000  00024b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179e2  00000000  00000000  0003f181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d33b  00000000  00000000  00056b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3e9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005268  00000000  00000000  000f3ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000f914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008548 	.word	0x08008548

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008548 	.word	0x08008548

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <LEDWrite>:
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LEDWrite(int r, int g, int b) {
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, r);
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <LEDWrite+0x30>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, g);
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <LEDWrite+0x30>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b);
 80004f4:	4b04      	ldr	r3, [pc, #16]	@ (8000508 <LEDWrite+0x30>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80004fc:	bf00      	nop
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	200001b8 	.word	0x200001b8

0800050c <Print>:
void Print(char* val) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*)val, strlen(val));
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff fe5f 	bl	80001d8 <strlen>
 800051a:	4603      	mov	r3, r0
 800051c:	b29b      	uxth	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f007 fba3 	bl	8007c6c <CDC_Transmit_FS>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fc98 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f830 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 fa62 	bl	8000a04 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000540:	f000 f8e6 	bl	8000710 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000544:	f007 fad4 	bl	8007af0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000548:	f000 f9d0 	bl	80008ec <MX_TIM2_Init>
  MX_TIM1_Init();
 800054c:	f000 f916 	bl	800077c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000550:	f000 f88c 	bl	800066c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000554:	2100      	movs	r1, #0
 8000556:	480f      	ldr	r0, [pc, #60]	@ (8000594 <main+0x64>)
 8000558:	f003 f9f0 	bl	800393c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800055c:	2104      	movs	r1, #4
 800055e:	480d      	ldr	r0, [pc, #52]	@ (8000594 <main+0x64>)
 8000560:	f003 f9ec 	bl	800393c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000564:	2108      	movs	r1, #8
 8000566:	480b      	ldr	r0, [pc, #44]	@ (8000594 <main+0x64>)
 8000568:	f003 f9e8 	bl	800393c <HAL_TIM_PWM_Start>
  LEDWrite(255, 0, 0); // Initialize phase
 800056c:	2200      	movs	r2, #0
 800056e:	2100      	movs	r1, #0
 8000570:	20ff      	movs	r0, #255	@ 0xff
 8000572:	f7ff ffb1 	bl	80004d8 <LEDWrite>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	 LEDWrite(0, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff ffac 	bl	80004d8 <LEDWrite>
	 Print("Hello, World!\n");
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <main+0x68>)
 8000582:	f7ff ffc3 	bl	800050c <Print>

	 HAL_Delay(2000);
 8000586:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800058a:	f000 fcdf 	bl	8000f4c <HAL_Delay>
	 LEDWrite(0, 0, 0);
 800058e:	bf00      	nop
 8000590:	e7f1      	b.n	8000576 <main+0x46>
 8000592:	bf00      	nop
 8000594:	200001b8 	.word	0x200001b8
 8000598:	08008560 	.word	0x08008560

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	@ 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	@ 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f007 ffa0 	bl	80084f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	4a26      	ldr	r2, [pc, #152]	@ (8000664 <SystemClock_Config+0xc8>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d0:	4b24      	ldr	r3, [pc, #144]	@ (8000664 <SystemClock_Config+0xc8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <SystemClock_Config+0xcc>)
 80005e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <SystemClock_Config+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000600:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800060c:	2319      	movs	r3, #25
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000610:	23c0      	movs	r3, #192	@ 0xc0
 8000612:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fc29 	bl	8002e78 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800062c:	f000 fa58 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2103      	movs	r1, #3
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fe8b 	bl	8003368 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000658:	f000 fa42 	bl	8000ae0 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	@ 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800067e:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <MX_ADC1_Init+0x98>)
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <MX_ADC1_Init+0x9c>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_ADC1_Init+0x98>)
 8000686:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800068a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068c:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000692:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000698:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <MX_ADC1_Init+0xa0>)
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006cc:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006ce:	f000 fc61 	bl	8000f94 <HAL_ADC_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 fa02 	bl	8000ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006dc:	2303      	movs	r3, #3
 80006de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006ee:	f000 fc95 	bl	800101c <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f8:	f000 f9f2 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000118 	.word	0x20000118
 8000708:	40012000 	.word	0x40012000
 800070c:	0f000001 	.word	0x0f000001

08000710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <MX_SPI1_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_SPI1_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000744:	2218      	movs	r2, #24
 8000746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_SPI1_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000762:	f002 ffb9 	bl	80036d8 <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800076c:	f000 f9b8 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000160 	.word	0x20000160
 8000778:	40013000 	.word	0x40013000

0800077c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	@ 0x58
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2220      	movs	r2, #32
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f007 fe9b 	bl	80084f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ba:	4b4a      	ldr	r3, [pc, #296]	@ (80008e4 <MX_TIM1_Init+0x168>)
 80007bc:	4a4a      	ldr	r2, [pc, #296]	@ (80008e8 <MX_TIM1_Init+0x16c>)
 80007be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007c0:	4b48      	ldr	r3, [pc, #288]	@ (80008e4 <MX_TIM1_Init+0x168>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b47      	ldr	r3, [pc, #284]	@ (80008e4 <MX_TIM1_Init+0x168>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80007cc:	4b45      	ldr	r3, [pc, #276]	@ (80008e4 <MX_TIM1_Init+0x168>)
 80007ce:	22ff      	movs	r2, #255	@ 0xff
 80007d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d2:	4b44      	ldr	r3, [pc, #272]	@ (80008e4 <MX_TIM1_Init+0x168>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d8:	4b42      	ldr	r3, [pc, #264]	@ (80008e4 <MX_TIM1_Init+0x168>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007de:	4b41      	ldr	r3, [pc, #260]	@ (80008e4 <MX_TIM1_Init+0x168>)
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e4:	483f      	ldr	r0, [pc, #252]	@ (80008e4 <MX_TIM1_Init+0x168>)
 80007e6:	f003 f800 	bl	80037ea <HAL_TIM_Base_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80007f0:	f000 f976 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007fe:	4619      	mov	r1, r3
 8000800:	4838      	ldr	r0, [pc, #224]	@ (80008e4 <MX_TIM1_Init+0x168>)
 8000802:	f003 fa0d 	bl	8003c20 <HAL_TIM_ConfigClockSource>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800080c:	f000 f968 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000810:	4834      	ldr	r0, [pc, #208]	@ (80008e4 <MX_TIM1_Init+0x168>)
 8000812:	f003 f839 	bl	8003888 <HAL_TIM_PWM_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800081c:	f000 f960 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000828:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800082c:	4619      	mov	r1, r3
 800082e:	482d      	ldr	r0, [pc, #180]	@ (80008e4 <MX_TIM1_Init+0x168>)
 8000830:	f003 fd96 	bl	8004360 <HAL_TIMEx_MasterConfigSynchronization>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800083a:	f000 f951 	bl	8000ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800083e:	2360      	movs	r3, #96	@ 0x60
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800084a:	2300      	movs	r3, #0
 800084c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	4820      	ldr	r0, [pc, #128]	@ (80008e4 <MX_TIM1_Init+0x168>)
 8000864:	f003 f91a 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800086e:	f000 f937 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	2204      	movs	r2, #4
 8000878:	4619      	mov	r1, r3
 800087a:	481a      	ldr	r0, [pc, #104]	@ (80008e4 <MX_TIM1_Init+0x168>)
 800087c:	f003 f90e 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000886:	f000 f92b 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800088a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088e:	2208      	movs	r2, #8
 8000890:	4619      	mov	r1, r3
 8000892:	4814      	ldr	r0, [pc, #80]	@ (80008e4 <MX_TIM1_Init+0x168>)
 8000894:	f003 f902 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800089e:	f000 f91f 	bl	8000ae0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <MX_TIM1_Init+0x168>)
 80008c6:	f003 fdb9 	bl	800443c <HAL_TIMEx_ConfigBreakDeadTime>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80008d0:	f000 f906 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <MX_TIM1_Init+0x168>)
 80008d6:	f000 f9f3 	bl	8000cc0 <HAL_TIM_MspPostInit>

}
 80008da:	bf00      	nop
 80008dc:	3758      	adds	r7, #88	@ 0x58
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001b8 	.word	0x200001b8
 80008e8:	40010000 	.word	0x40010000

080008ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	@ 0x38
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	f107 0320 	add.w	r3, r7, #32
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800091c:	4b38      	ldr	r3, [pc, #224]	@ (8000a00 <MX_TIM2_Init+0x114>)
 800091e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 960;
 8000924:	4b36      	ldr	r3, [pc, #216]	@ (8000a00 <MX_TIM2_Init+0x114>)
 8000926:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 800092a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b34      	ldr	r3, [pc, #208]	@ (8000a00 <MX_TIM2_Init+0x114>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000932:	4b33      	ldr	r3, [pc, #204]	@ (8000a00 <MX_TIM2_Init+0x114>)
 8000934:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000938:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <MX_TIM2_Init+0x114>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b2f      	ldr	r3, [pc, #188]	@ (8000a00 <MX_TIM2_Init+0x114>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000946:	482e      	ldr	r0, [pc, #184]	@ (8000a00 <MX_TIM2_Init+0x114>)
 8000948:	f002 ff4f 	bl	80037ea <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000952:	f000 f8c5 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800095c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000960:	4619      	mov	r1, r3
 8000962:	4827      	ldr	r0, [pc, #156]	@ (8000a00 <MX_TIM2_Init+0x114>)
 8000964:	f003 f95c 	bl	8003c20 <HAL_TIM_ConfigClockSource>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800096e:	f000 f8b7 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000972:	4823      	ldr	r0, [pc, #140]	@ (8000a00 <MX_TIM2_Init+0x114>)
 8000974:	f002 ff88 	bl	8003888 <HAL_TIM_PWM_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800097e:	f000 f8af 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	4619      	mov	r1, r3
 8000990:	481b      	ldr	r0, [pc, #108]	@ (8000a00 <MX_TIM2_Init+0x114>)
 8000992:	f003 fce5 	bl	8004360 <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800099c:	f000 f8a0 	bl	8000ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a0:	2360      	movs	r3, #96	@ 0x60
 80009a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	4812      	ldr	r0, [pc, #72]	@ (8000a00 <MX_TIM2_Init+0x114>)
 80009b8:	f003 f870 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009c2:	f000 f88d 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2204      	movs	r2, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <MX_TIM2_Init+0x114>)
 80009ce:	f003 f865 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80009d8:	f000 f882 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2208      	movs	r2, #8
 80009e0:	4619      	mov	r1, r3
 80009e2:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <MX_TIM2_Init+0x114>)
 80009e4:	f003 f85a 	bl	8003a9c <HAL_TIM_PWM_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80009ee:	f000 f877 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009f2:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <MX_TIM2_Init+0x114>)
 80009f4:	f000 f964 	bl	8000cc0 <HAL_TIM_MspPostInit>

}
 80009f8:	bf00      	nop
 80009fa:	3738      	adds	r7, #56	@ 0x38
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000200 	.word	0x20000200

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a2c      	ldr	r2, [pc, #176]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a25      	ldr	r2, [pc, #148]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLASH_CS_Pin|ACCEL_CS_Pin|GYRO_CS_Pin|BARO_CS_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f240 4107 	movw	r1, #1031	@ 0x407
 8000a74:	4818      	ldr	r0, [pc, #96]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a76:	f000 ff95 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4813      	ldr	r0, [pc, #76]	@ (8000adc <MX_GPIO_Init+0xd8>)
 8000a8e:	f000 fe05 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH_CS_Pin ACCEL_CS_Pin GYRO_CS_Pin BARO_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin|ACCEL_CS_Pin|GYRO_CS_Pin|BARO_CS_Pin;
 8000a92:	f240 4307 	movw	r3, #1031	@ 0x407
 8000a96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480b      	ldr	r0, [pc, #44]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000aac:	f000 fdf6 	bl	800169c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_ACCEL_Pin */
  GPIO_InitStruct.Pin = INT_ACCEL_Pin;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <MX_GPIO_Init+0xd4>)
 8000ac6:	f000 fde9 	bl	800169c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40020000 	.word	0x40020000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <Error_Handler+0x8>

08000aec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b02:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a08      	ldr	r2, [pc, #32]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <HAL_ADC_MspInit+0x7c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d127      	bne.n	8000bae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <HAL_ADC_MspInit+0x80>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	4a15      	ldr	r2, [pc, #84]	@ (8000bbc <HAL_ADC_MspInit+0x80>)
 8000b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <HAL_ADC_MspInit+0x80>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_ADC_MspInit+0x80>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a0e      	ldr	r2, [pc, #56]	@ (8000bbc <HAL_ADC_MspInit+0x80>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <HAL_ADC_MspInit+0x80>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VSENSE_Pin;
 8000b96:	2308      	movs	r3, #8
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VSENSE_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <HAL_ADC_MspInit+0x84>)
 8000baa:	f000 fd77 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	@ 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40012000 	.word	0x40012000
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a19      	ldr	r2, [pc, #100]	@ (8000c48 <HAL_SPI_MspInit+0x84>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d12b      	bne.n	8000c3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a17      	ldr	r2, [pc, #92]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a10      	ldr	r2, [pc, #64]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <HAL_SPI_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c1e:	23e0      	movs	r3, #224	@ 0xe0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <HAL_SPI_MspInit+0x8c>)
 8000c3a:	f000 fd2f 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	@ 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40013000 	.word	0x40013000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000

08000c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a15      	ldr	r2, [pc, #84]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x64>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d10e      	bne.n	8000c84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	4a13      	ldr	r2, [pc, #76]	@ (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c82:	e012      	b.n	8000caa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c8c:	d10d      	bne.n	8000caa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_TIM_Base_MspInit+0x68>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a24      	ldr	r2, [pc, #144]	@ (8000d70 <HAL_TIM_MspPostInit+0xb0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d11f      	bne.n	8000d22 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b23      	ldr	r3, [pc, #140]	@ (8000d74 <HAL_TIM_MspPostInit+0xb4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a22      	ldr	r2, [pc, #136]	@ (8000d74 <HAL_TIM_MspPostInit+0xb4>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_TIM_MspPostInit+0xb4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_B_Pin|LED_R_Pin|LED_G_Pin;
 8000cfe:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4817      	ldr	r0, [pc, #92]	@ (8000d78 <HAL_TIM_MspPostInit+0xb8>)
 8000d1c:	f000 fcbe 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d20:	e022      	b.n	8000d68 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d2a:	d11d      	bne.n	8000d68 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <HAL_TIM_MspPostInit+0xb4>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d34:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <HAL_TIM_MspPostInit+0xb4>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <HAL_TIM_MspPostInit+0xb4>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S1_Pin|S2_Pin|S3_Pin;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <HAL_TIM_MspPostInit+0xb8>)
 8000d64:	f000 fc9a 	bl	800169c <HAL_GPIO_Init>
}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	@ 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010000 	.word	0x40010000
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd2:	f000 f89b 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <OTG_FS_IRQHandler+0x10>)
 8000de2:	f000 ff3c 	bl	8001c5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000172c 	.word	0x2000172c

08000df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e18:	f7ff ffea 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	@ (8000e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	@ (8000e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	@ (8000e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e42:	f007 fb5d 	bl	8008500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fb73 	bl	8000530 <main>
  bx  lr    
 8000e4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e58:	080085d8 	.word	0x080085d8
  ldr r2, =_sbss
 8000e5c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e60:	20001e30 	.word	0x20001e30

08000e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea8 <HAL_Init+0x40>)
 8000e72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_Init+0x40>)
 8000e7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <HAL_Init+0x40>)
 8000e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 fbc1 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fe26 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023c00 	.word	0x40023c00

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fbd9 	bl	8001682 <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee8:	f000 fba1 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000248 	.word	0x20000248

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000248 	.word	0x20000248

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffee 	bl	8000f34 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffde 	bl	8000f34 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008

08000f94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e033      	b.n	8001012 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d109      	bne.n	8000fc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fdc2 	bl	8000b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d118      	bne.n	8001004 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fda:	f023 0302 	bic.w	r3, r3, #2
 8000fde:	f043 0202 	orr.w	r2, r3, #2
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f94a 	bl	8001280 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f023 0303 	bic.w	r3, r3, #3
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40
 8001002:	e001      	b.n	8001008 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <HAL_ADC_ConfigChannel+0x1c>
 8001034:	2302      	movs	r3, #2
 8001036:	e113      	b.n	8001260 <HAL_ADC_ConfigChannel+0x244>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b09      	cmp	r3, #9
 8001046:	d925      	bls.n	8001094 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68d9      	ldr	r1, [r3, #12]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	3b1e      	subs	r3, #30
 800105e:	2207      	movs	r2, #7
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43da      	mvns	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	400a      	ands	r2, r1
 800106c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68d9      	ldr	r1, [r3, #12]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	4603      	mov	r3, r0
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4403      	add	r3, r0
 8001086:	3b1e      	subs	r3, #30
 8001088:	409a      	lsls	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	430a      	orrs	r2, r1
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	e022      	b.n	80010da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6919      	ldr	r1, [r3, #16]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	2207      	movs	r2, #7
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	400a      	ands	r2, r1
 80010b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6919      	ldr	r1, [r3, #16]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	4603      	mov	r3, r0
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4403      	add	r3, r0
 80010d0:	409a      	lsls	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d824      	bhi.n	800112c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	3b05      	subs	r3, #5
 80010f4:	221f      	movs	r2, #31
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	400a      	ands	r2, r1
 8001102:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	3b05      	subs	r3, #5
 800111e:	fa00 f203 	lsl.w	r2, r0, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	635a      	str	r2, [r3, #52]	@ 0x34
 800112a:	e04c      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b0c      	cmp	r3, #12
 8001132:	d824      	bhi.n	800117e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	3b23      	subs	r3, #35	@ 0x23
 8001146:	221f      	movs	r2, #31
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43da      	mvns	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	400a      	ands	r2, r1
 8001154:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b23      	subs	r3, #35	@ 0x23
 8001170:	fa00 f203 	lsl.w	r2, r0, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	631a      	str	r2, [r3, #48]	@ 0x30
 800117c:	e023      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	3b41      	subs	r3, #65	@ 0x41
 8001190:	221f      	movs	r2, #31
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	400a      	ands	r2, r1
 800119e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	3b41      	subs	r3, #65	@ 0x41
 80011ba:	fa00 f203 	lsl.w	r2, r0, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011c6:	4b29      	ldr	r3, [pc, #164]	@ (800126c <HAL_ADC_ConfigChannel+0x250>)
 80011c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a28      	ldr	r2, [pc, #160]	@ (8001270 <HAL_ADC_ConfigChannel+0x254>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d10f      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x1d8>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b12      	cmp	r3, #18
 80011da:	d10b      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_ADC_ConfigChannel+0x254>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12b      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x23a>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1c      	ldr	r2, [pc, #112]	@ (8001274 <HAL_ADC_ConfigChannel+0x258>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d003      	beq.n	8001210 <HAL_ADC_ConfigChannel+0x1f4>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b11      	cmp	r3, #17
 800120e:	d122      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a11      	ldr	r2, [pc, #68]	@ (8001274 <HAL_ADC_ConfigChannel+0x258>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d111      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <HAL_ADC_ConfigChannel+0x25c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HAL_ADC_ConfigChannel+0x260>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	0c9a      	lsrs	r2, r3, #18
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001248:	e002      	b.n	8001250 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3b01      	subs	r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f9      	bne.n	800124a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40012300 	.word	0x40012300
 8001270:	40012000 	.word	0x40012000
 8001274:	10000012 	.word	0x10000012
 8001278:	20000000 	.word	0x20000000
 800127c:	431bde83 	.word	0x431bde83

08001280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001288:	4b79      	ldr	r3, [pc, #484]	@ (8001470 <ADC_Init+0x1f0>)
 800128a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	431a      	orrs	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6859      	ldr	r1, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	021a      	lsls	r2, r3, #8
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80012d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6859      	ldr	r1, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6899      	ldr	r1, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001312:	4a58      	ldr	r2, [pc, #352]	@ (8001474 <ADC_Init+0x1f4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d022      	beq.n	800135e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6899      	ldr	r1, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6899      	ldr	r1, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	e00f      	b.n	800137e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800136c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800137c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0202 	bic.w	r2, r2, #2
 800138c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6899      	ldr	r1, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7e1b      	ldrb	r3, [r3, #24]
 8001398:	005a      	lsls	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d01b      	beq.n	80013e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80013ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6859      	ldr	r1, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d6:	3b01      	subs	r3, #1
 80013d8:	035a      	lsls	r2, r3, #13
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	e007      	b.n	80013f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001402:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	3b01      	subs	r3, #1
 8001410:	051a      	lsls	r2, r3, #20
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6899      	ldr	r1, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001436:	025a      	lsls	r2, r3, #9
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800144e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6899      	ldr	r1, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	029a      	lsls	r2, r3, #10
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	609a      	str	r2, [r3, #8]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40012300 	.word	0x40012300
 8001474:	0f000001 	.word	0x0f000001

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	@ (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	@ (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	@ (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	@ 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	@ 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff3e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff31 	bl	80014dc <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	@ 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e159      	b.n	800196c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8148 	bne.w	8001966 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d005      	beq.n	80016ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d130      	bne.n	8001750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	2203      	movs	r2, #3
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 0201 	and.w	r2, r3, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b03      	cmp	r3, #3
 800175a:	d017      	beq.n	800178c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d123      	bne.n	80017e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	08da      	lsrs	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3208      	adds	r2, #8
 80017da:	69b9      	ldr	r1, [r7, #24]
 80017dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0203 	and.w	r2, r3, #3
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80a2 	beq.w	8001966 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	4b57      	ldr	r3, [pc, #348]	@ (8001984 <HAL_GPIO_Init+0x2e8>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	4a56      	ldr	r2, [pc, #344]	@ (8001984 <HAL_GPIO_Init+0x2e8>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001830:	6453      	str	r3, [r2, #68]	@ 0x44
 8001832:	4b54      	ldr	r3, [pc, #336]	@ (8001984 <HAL_GPIO_Init+0x2e8>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800183e:	4a52      	ldr	r2, [pc, #328]	@ (8001988 <HAL_GPIO_Init+0x2ec>)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a49      	ldr	r2, [pc, #292]	@ (800198c <HAL_GPIO_Init+0x2f0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d019      	beq.n	800189e <HAL_GPIO_Init+0x202>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a48      	ldr	r2, [pc, #288]	@ (8001990 <HAL_GPIO_Init+0x2f4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x1fe>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a47      	ldr	r2, [pc, #284]	@ (8001994 <HAL_GPIO_Init+0x2f8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x1fa>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a46      	ldr	r2, [pc, #280]	@ (8001998 <HAL_GPIO_Init+0x2fc>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x1f6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a45      	ldr	r2, [pc, #276]	@ (800199c <HAL_GPIO_Init+0x300>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x1f2>
 800188a:	2304      	movs	r3, #4
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 800188e:	2307      	movs	r3, #7
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x204>
 800189e:	2300      	movs	r3, #0
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b0:	4935      	ldr	r1, [pc, #212]	@ (8001988 <HAL_GPIO_Init+0x2ec>)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018be:	4b38      	ldr	r3, [pc, #224]	@ (80019a0 <HAL_GPIO_Init+0x304>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018e2:	4a2f      	ldr	r2, [pc, #188]	@ (80019a0 <HAL_GPIO_Init+0x304>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e8:	4b2d      	ldr	r3, [pc, #180]	@ (80019a0 <HAL_GPIO_Init+0x304>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800190c:	4a24      	ldr	r2, [pc, #144]	@ (80019a0 <HAL_GPIO_Init+0x304>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001912:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <HAL_GPIO_Init+0x304>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001936:	4a1a      	ldr	r2, [pc, #104]	@ (80019a0 <HAL_GPIO_Init+0x304>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193c:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <HAL_GPIO_Init+0x304>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001960:	4a0f      	ldr	r2, [pc, #60]	@ (80019a0 <HAL_GPIO_Init+0x304>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b0f      	cmp	r3, #15
 8001970:	f67f aea2 	bls.w	80016b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	3724      	adds	r7, #36	@ 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40013c00 	.word	0x40013c00

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c0:	e003      	b.n	80019ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019c2:	887b      	ldrh	r3, [r7, #2]
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af02      	add	r7, sp, #8
 80019dc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e101      	b.n	8001bec <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f006 fa6a 	bl	8007edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a16:	d102      	bne.n	8001a1e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 fe73 	bl	800470e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7c1a      	ldrb	r2, [r3, #16]
 8001a30:	f88d 2000 	strb.w	r2, [sp]
 8001a34:	3304      	adds	r3, #4
 8001a36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a38:	f002 fd52 	bl	80044e0 <USB_CoreInit>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2202      	movs	r2, #2
 8001a46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0ce      	b.n	8001bec <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fe6b 	bl	8004730 <USB_SetCurrentMode>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0bf      	b.n	8001bec <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e04a      	b.n	8001b08 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	3315      	adds	r3, #21
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3314      	adds	r3, #20
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	b298      	uxth	r0, r3
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	332e      	adds	r3, #46	@ 0x2e
 8001aae:	4602      	mov	r2, r0
 8001ab0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	331c      	adds	r3, #28
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3320      	adds	r3, #32
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	3324      	adds	r3, #36	@ 0x24
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	3301      	adds	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d3af      	bcc.n	8001a72 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e044      	b.n	8001ba2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	791b      	ldrb	r3, [r3, #4]
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d3b5      	bcc.n	8001b18 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7c1a      	ldrb	r2, [r3, #16]
 8001bb4:	f88d 2000 	strb.w	r2, [sp]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bbc:	f002 fe04 	bl	80047c8 <USB_DevInit>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00c      	b.n	8001bec <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 fe48 	bl	800587a <USB_DevDisconnect>

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_PCD_Start+0x1c>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e022      	b.n	8001c56 <HAL_PCD_Start+0x62>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d009      	beq.n	8001c38 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 fd55 	bl	80046ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fdf6 	bl	8005838 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c5e:	b590      	push	{r4, r7, lr}
 8001c60:	b08d      	sub	sp, #52	@ 0x34
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 feb4 	bl	80059e2 <USB_GetMode>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 848c 	bne.w	800259a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fe18 	bl	80058bc <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8482 	beq.w	8002598 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fe05 	bl	80058bc <USB_ReadInterrupts>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d107      	bne.n	8001ccc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f002 0202 	and.w	r2, r2, #2
 8001cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fdf3 	bl	80058bc <USB_ReadInterrupts>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	d161      	bne.n	8001da4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0210 	bic.w	r2, r2, #16
 8001cee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	0c5b      	lsrs	r3, r3, #17
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d124      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d035      	beq.n	8001d94 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	6a38      	ldr	r0, [r7, #32]
 8001d3c:	f003 fc2a 	bl	8005594 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d4c:	441a      	add	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d5e:	441a      	add	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	615a      	str	r2, [r3, #20]
 8001d64:	e016      	b.n	8001d94 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	0c5b      	lsrs	r3, r3, #17
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d110      	bne.n	8001d94 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d78:	2208      	movs	r2, #8
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6a38      	ldr	r0, [r7, #32]
 8001d7e:	f003 fc09 	bl	8005594 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d8e:	441a      	add	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0210 	orr.w	r2, r2, #16
 8001da2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fd87 	bl	80058bc <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001db4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001db8:	f040 80a7 	bne.w	8001f0a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fd8c 	bl	80058e2 <USB_ReadDevAllOutEpInterrupt>
 8001dca:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001dcc:	e099      	b.n	8001f02 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 808e 	beq.w	8001ef6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fdb0 	bl	800594a <USB_ReadDevOutEPInterrupt>
 8001dea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e02:	461a      	mov	r2, r3
 8001e04:	2301      	movs	r3, #1
 8001e06:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fea2 	bl	8002b54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e26:	461a      	mov	r2, r3
 8001e28:	2308      	movs	r3, #8
 8001e2a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 ff78 	bl	8002d24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d008      	beq.n	8001e50 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2310      	movs	r3, #16
 8001e4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d030      	beq.n	8001ebc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e62:	2b80      	cmp	r3, #128	@ 0x80
 8001e64:	d109      	bne.n	8001e7a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e78:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	78db      	ldrb	r3, [r3, #3]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d108      	bne.n	8001eaa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f006 f915 	bl	80080d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2302      	movs	r3, #2
 8001eba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ef4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	3301      	adds	r3, #1
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f47f af62 	bne.w	8001dce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fcd4 	bl	80058bc <USB_ReadInterrupts>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f1e:	f040 80db 	bne.w	80020d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fcf5 	bl	8005916 <USB_ReadDevAllInEpInterrupt>
 8001f2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001f32:	e0cd      	b.n	80020d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80c2 	beq.w	80020c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fd1b 	bl	8005986 <USB_ReadDevInEPInterrupt>
 8001f50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d057      	beq.n	800200c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	2201      	movs	r2, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69f9      	ldr	r1, [r7, #28]
 8001f78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2301      	movs	r3, #1
 8001f90:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	799b      	ldrb	r3, [r3, #6]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d132      	bne.n	8002000 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3320      	adds	r3, #32
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4403      	add	r3, r0
 8001fba:	331c      	adds	r3, #28
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4419      	add	r1, r3
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4403      	add	r3, r0
 8001fce:	3320      	adds	r3, #32
 8001fd0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d113      	bne.n	8002000 <HAL_PCD_IRQHandler+0x3a2>
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3324      	adds	r3, #36	@ 0x24
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	f003 fd22 	bl	8005a44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	b2db      	uxtb	r3, r3
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f005 ffe9 	bl	8007fde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002022:	461a      	mov	r2, r3
 8002024:	2308      	movs	r3, #8
 8002026:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800203e:	461a      	mov	r2, r3
 8002040:	2310      	movs	r3, #16
 8002042:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800205a:	461a      	mov	r2, r3
 800205c:	2340      	movs	r3, #64	@ 0x40
 800205e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d023      	beq.n	80020b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800206a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800206c:	6a38      	ldr	r0, [r7, #32]
 800206e:	f002 fd0f 	bl	8004a90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	3310      	adds	r3, #16
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	78db      	ldrb	r3, [r3, #3]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d108      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2200      	movs	r2, #0
 8002092:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	b2db      	uxtb	r3, r3
 8002098:	4619      	mov	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f006 f82c 	bl	80080f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020ac:	461a      	mov	r2, r3
 80020ae:	2302      	movs	r3, #2
 80020b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fcbb 	bl	8002a3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	3301      	adds	r3, #1
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80020ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80020d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f47f af2e 	bne.w	8001f34 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fbed 	bl	80058bc <USB_ReadInterrupts>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80020ec:	d122      	bne.n	8002134 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002108:	2b01      	cmp	r3, #1
 800210a:	d108      	bne.n	800211e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002114:	2100      	movs	r1, #0
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fea2 	bl	8002e60 <HAL_PCDEx_LPM_Callback>
 800211c:	e002      	b.n	8002124 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f005 ffca 	bl	80080b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f003 fbbf 	bl	80058bc <USB_ReadInterrupts>
 800213e:	4603      	mov	r3, r0
 8002140:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002148:	d112      	bne.n	8002170 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d102      	bne.n	8002160 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f005 ff86 	bl	800806c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800216e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f003 fba1 	bl	80058bc <USB_ReadInterrupts>
 800217a:	4603      	mov	r3, r0
 800217c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002184:	f040 80b7 	bne.w	80022f6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2110      	movs	r1, #16
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fc74 	bl	8004a90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ac:	e046      	b.n	800223c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021ba:	461a      	mov	r2, r3
 80021bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80021c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021d2:	0151      	lsls	r1, r2, #5
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	440a      	add	r2, r1
 80021d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80021dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80021e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ee:	461a      	mov	r2, r3
 80021f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80021f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002206:	0151      	lsls	r1, r2, #5
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	440a      	add	r2, r1
 800220c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002210:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002214:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002226:	0151      	lsls	r1, r2, #5
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	440a      	add	r2, r1
 800222c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002230:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002234:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002238:	3301      	adds	r3, #1
 800223a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	791b      	ldrb	r3, [r3, #4]
 8002240:	461a      	mov	r2, r3
 8002242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002244:	4293      	cmp	r3, r2
 8002246:	d3b2      	bcc.n	80021ae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002256:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800225a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7bdb      	ldrb	r3, [r3, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d016      	beq.n	8002292 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800226a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002274:	f043 030b 	orr.w	r3, r3, #11
 8002278:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800228a:	f043 030b 	orr.w	r3, r3, #11
 800228e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002290:	e015      	b.n	80022be <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022a4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80022a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022b8:	f043 030b 	orr.w	r3, r3, #11
 80022bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022cc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80022d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022e0:	461a      	mov	r2, r3
 80022e2:	f003 fbaf 	bl	8005a44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80022f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 fade 	bl	80058bc <USB_ReadInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800230a:	d123      	bne.n	8002354 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f003 fb74 	bl	80059fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fc31 	bl	8004b82 <USB_GetDevSpeed>
 8002320:	4603      	mov	r3, r0
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681c      	ldr	r4, [r3, #0]
 800232c:	f001 f9c8 	bl	80036c0 <HAL_RCC_GetHCLKFreq>
 8002330:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002336:	461a      	mov	r2, r3
 8002338:	4620      	mov	r0, r4
 800233a:	f002 f935 	bl	80045a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f005 fe75 	bl	800802e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002352:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f003 faaf 	bl	80058bc <USB_ReadInterrupts>
 800235e:	4603      	mov	r3, r0
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b08      	cmp	r3, #8
 8002366:	d10a      	bne.n	800237e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f005 fe52 	bl	8008012 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f002 0208 	and.w	r2, r2, #8
 800237c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fa9a 	bl	80058bc <USB_ReadInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238e:	2b80      	cmp	r3, #128	@ 0x80
 8002390:	d123      	bne.n	80023da <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800239e:	2301      	movs	r3, #1
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a2:	e014      	b.n	80023ce <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	4619      	mov	r1, r3
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fb08 	bl	80029d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	3301      	adds	r3, #1
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	791b      	ldrb	r3, [r3, #4]
 80023d2:	461a      	mov	r2, r3
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d3e4      	bcc.n	80023a4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 fa6c 	bl	80058bc <USB_ReadInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023ee:	d13c      	bne.n	800246a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023f0:	2301      	movs	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f4:	e02b      	b.n	800244e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	3318      	adds	r3, #24
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d115      	bne.n	8002448 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800241c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800241e:	2b00      	cmp	r3, #0
 8002420:	da12      	bge.n	8002448 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002426:	4613      	mov	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	3317      	adds	r3, #23
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fac8 	bl	80029d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	3301      	adds	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	791b      	ldrb	r3, [r3, #4]
 8002452:	461a      	mov	r2, r3
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	4293      	cmp	r3, r2
 8002458:	d3cd      	bcc.n	80023f6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f003 fa24 	bl	80058bc <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800247a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800247e:	d156      	bne.n	800252e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002480:	2301      	movs	r3, #1
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
 8002484:	e045      	b.n	8002512 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d12e      	bne.n	800250c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	da2b      	bge.n	800250c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80024c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d121      	bne.n	800250c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002504:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002508:	6053      	str	r3, [r2, #4]
            break;
 800250a:	e008      	b.n	800251e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	3301      	adds	r3, #1
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	791b      	ldrb	r3, [r3, #4]
 8002516:	461a      	mov	r2, r3
 8002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251a:	4293      	cmp	r3, r2
 800251c:	d3b3      	bcc.n	8002486 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800252c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f003 f9c2 	bl	80058bc <USB_ReadInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800253e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002542:	d10a      	bne.n	800255a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f005 fde9 	bl	800811c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f003 f9ac 	bl	80058bc <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b04      	cmp	r3, #4
 800256c:	d115      	bne.n	800259a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f005 fdd9 	bl	8008138 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	e000      	b.n	800259a <HAL_PCD_IRQHandler+0x93c>
      return;
 8002598:	bf00      	nop
    }
  }
}
 800259a:	3734      	adds	r7, #52	@ 0x34
 800259c:	46bd      	mov	sp, r7
 800259e:	bd90      	pop	{r4, r7, pc}

080025a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_PCD_SetAddress+0x1a>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e012      	b.n	80025e0 <HAL_PCD_SetAddress+0x40>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 f90b 	bl	80057ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	70fb      	strb	r3, [r7, #3]
 80025fa:	460b      	mov	r3, r1
 80025fc:	803b      	strh	r3, [r7, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	da0f      	bge.n	800262e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 020f 	and.w	r2, r3, #15
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	3310      	adds	r3, #16
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	3304      	adds	r3, #4
 8002624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	705a      	strb	r2, [r3, #1]
 800262c:	e00f      	b.n	800264e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	f003 020f 	and.w	r2, r3, #15
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	3304      	adds	r3, #4
 8002646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800265a:	883a      	ldrh	r2, [r7, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	78ba      	ldrb	r2, [r7, #2]
 8002664:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002678:	78bb      	ldrb	r3, [r7, #2]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d102      	bne.n	8002684 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_PCD_EP_Open+0xaa>
 800268e:	2302      	movs	r3, #2
 8002690:	e00e      	b.n	80026b0 <HAL_PCD_EP_Open+0xc8>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68f9      	ldr	r1, [r7, #12]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 fa93 	bl	8004bcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80026ae:	7afb      	ldrb	r3, [r7, #11]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da0f      	bge.n	80026ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	3310      	adds	r3, #16
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	3304      	adds	r3, #4
 80026e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	705a      	strb	r2, [r3, #1]
 80026ea:	e00f      	b.n	800270c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	f003 020f 	and.w	r2, r3, #15
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	3304      	adds	r3, #4
 8002704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	b2da      	uxtb	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_PCD_EP_Close+0x6e>
 8002722:	2302      	movs	r3, #2
 8002724:	e00e      	b.n	8002744 <HAL_PCD_EP_Close+0x8c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68f9      	ldr	r1, [r7, #12]
 8002734:	4618      	mov	r0, r3
 8002736:	f002 fad1 	bl	8004cdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	460b      	mov	r3, r1
 800275a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800275c:	7afb      	ldrb	r3, [r7, #11]
 800275e:	f003 020f 	and.w	r2, r3, #15
 8002762:	4613      	mov	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4413      	add	r3, r2
 8002772:	3304      	adds	r3, #4
 8002774:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2200      	movs	r2, #0
 800278c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	b2da      	uxtb	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	799b      	ldrb	r3, [r3, #6]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d102      	bne.n	80027a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	799b      	ldrb	r3, [r3, #6]
 80027b0:	461a      	mov	r2, r3
 80027b2:	6979      	ldr	r1, [r7, #20]
 80027b4:	f002 fb6e 	bl	8004e94 <USB_EPStartXfer>

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	f003 020f 	and.w	r2, r3, #15
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80027e4:	681b      	ldr	r3, [r3, #0]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	460b      	mov	r3, r1
 8002800:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	f003 020f 	and.w	r2, r3, #15
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	3310      	adds	r3, #16
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	3304      	adds	r3, #4
 8002818:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2201      	movs	r2, #1
 8002830:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002832:	7afb      	ldrb	r3, [r7, #11]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	b2da      	uxtb	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	799b      	ldrb	r3, [r3, #6]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d102      	bne.n	800284c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	799b      	ldrb	r3, [r3, #6]
 8002854:	461a      	mov	r2, r3
 8002856:	6979      	ldr	r1, [r7, #20]
 8002858:	f002 fb1c 	bl	8004e94 <USB_EPStartXfer>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	7912      	ldrb	r2, [r2, #4]
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e04f      	b.n	8002924 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002888:	2b00      	cmp	r3, #0
 800288a:	da0f      	bge.n	80028ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	f003 020f 	and.w	r2, r3, #15
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	3310      	adds	r3, #16
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	705a      	strb	r2, [r3, #1]
 80028aa:	e00d      	b.n	80028c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	3304      	adds	r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_PCD_EP_SetStall+0x82>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e01d      	b.n	8002924 <HAL_PCD_EP_SetStall+0xbe>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68f9      	ldr	r1, [r7, #12]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 fea4 	bl	8005644 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	7999      	ldrb	r1, [r3, #6]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002914:	461a      	mov	r2, r3
 8002916:	f003 f895 	bl	8005a44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	7912      	ldrb	r2, [r2, #4]
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e042      	b.n	80029d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800294a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294e:	2b00      	cmp	r3, #0
 8002950:	da0f      	bge.n	8002972 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	f003 020f 	and.w	r2, r3, #15
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	3310      	adds	r3, #16
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	3304      	adds	r3, #4
 8002968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	705a      	strb	r2, [r3, #1]
 8002970:	e00f      	b.n	8002992 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	f003 020f 	and.w	r2, r3, #15
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002998:	78fb      	ldrb	r3, [r7, #3]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_PCD_EP_ClrStall+0x86>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e00e      	b.n	80029d0 <HAL_PCD_EP_ClrStall+0xa4>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68f9      	ldr	r1, [r7, #12]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 fead 	bl	8005720 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80029e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	da0c      	bge.n	8002a06 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	f003 020f 	and.w	r2, r3, #15
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	3310      	adds	r3, #16
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	3304      	adds	r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e00c      	b.n	8002a20 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 020f 	and.w	r2, r3, #15
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68f9      	ldr	r1, [r7, #12]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 fccc 	bl	80053c4 <USB_EPStopXfer>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a30:	7afb      	ldrb	r3, [r7, #11]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b08a      	sub	sp, #40	@ 0x28
 8002a3e:	af02      	add	r7, sp, #8
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	3310      	adds	r3, #16
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3304      	adds	r3, #4
 8002a60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d901      	bls.n	8002a72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e06b      	b.n	8002b4a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d902      	bls.n	8002a8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3303      	adds	r3, #3
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a96:	e02a      	b.n	8002aee <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d902      	bls.n	8002ab4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	3303      	adds	r3, #3
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68d9      	ldr	r1, [r3, #12]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6978      	ldr	r0, [r7, #20]
 8002ad2:	f002 fd21 	bl	8005518 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	441a      	add	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	441a      	add	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d809      	bhi.n	8002b18 <PCD_WriteEmptyTxFifo+0xde>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d203      	bcs.n	8002b18 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1bf      	bne.n	8002a98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d811      	bhi.n	8002b48 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	6939      	ldr	r1, [r7, #16]
 8002b40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b44:	4013      	ands	r3, r2
 8002b46:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	333c      	adds	r3, #60	@ 0x3c
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	799b      	ldrb	r3, [r3, #6]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d17b      	bne.n	8002c82 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	4a61      	ldr	r2, [pc, #388]	@ (8002d1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	f240 80b9 	bls.w	8002d10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80b3 	beq.w	8002d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bbc:	6093      	str	r3, [r2, #8]
 8002bbe:	e0a7      	b.n	8002d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2320      	movs	r3, #32
 8002bda:	6093      	str	r3, [r2, #8]
 8002bdc:	e098      	b.n	8002d10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f040 8093 	bne.w	8002d10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	4a4b      	ldr	r2, [pc, #300]	@ (8002d1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d90f      	bls.n	8002c12 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c0e:	6093      	str	r3, [r2, #8]
 8002c10:	e07e      	b.n	8002d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	4413      	add	r3, r2
 8002c24:	3304      	adds	r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a1a      	ldr	r2, [r3, #32]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	440b      	add	r3, r1
 8002c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3e:	1ad2      	subs	r2, r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d114      	bne.n	8002c74 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2101      	movs	r1, #1
 8002c60:	f002 fef0 	bl	8005a44 <USB_EP0_OutStart>
 8002c64:	e006      	b.n	8002c74 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	441a      	add	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f005 f994 	bl	8007fa8 <HAL_PCD_DataOutStageCallback>
 8002c80:	e046      	b.n	8002d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	4a26      	ldr	r2, [pc, #152]	@ (8002d20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d124      	bne.n	8002cd4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ca6:	6093      	str	r3, [r2, #8]
 8002ca8:	e032      	b.n	8002d10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2320      	movs	r3, #32
 8002cc4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f005 f96b 	bl	8007fa8 <HAL_PCD_DataOutStageCallback>
 8002cd2:	e01d      	b.n	8002d10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d114      	bne.n	8002d04 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d108      	bne.n	8002d04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2100      	movs	r1, #0
 8002d00:	f002 fea0 	bl	8005a44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f005 f94c 	bl	8007fa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	4f54300a 	.word	0x4f54300a
 8002d20:	4f54310a 	.word	0x4f54310a

08002d24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	333c      	adds	r3, #60	@ 0x3c
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a15      	ldr	r2, [pc, #84]	@ (8002dac <PCD_EP_OutSetupPacket_int+0x88>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d90e      	bls.n	8002d78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d009      	beq.n	8002d78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d70:	461a      	mov	r2, r3
 8002d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f005 f903 	bl	8007f84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4a0a      	ldr	r2, [pc, #40]	@ (8002dac <PCD_EP_OutSetupPacket_int+0x88>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d90c      	bls.n	8002da0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	799b      	ldrb	r3, [r3, #6]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d108      	bne.n	8002da0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	f002 fe52 	bl	8005a44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	4f54300a 	.word	0x4f54300a

08002db0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	70fb      	strb	r3, [r7, #3]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002dce:	883b      	ldrh	r3, [r7, #0]
 8002dd0:	0419      	lsls	r1, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ddc:	e028      	b.n	8002e30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	0c1b      	lsrs	r3, r3, #16
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	4413      	add	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e00d      	b.n	8002e0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	3340      	adds	r3, #64	@ 0x40
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	4413      	add	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d3ec      	bcc.n	8002df2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e18:	883b      	ldrh	r3, [r7, #0]
 8002e1a:	0418      	lsls	r0, r3, #16
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	4302      	orrs	r2, r0
 8002e28:	3340      	adds	r3, #64	@ 0x40
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e267      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d075      	beq.n	8002f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e96:	4b88      	ldr	r3, [pc, #544]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d00c      	beq.n	8002ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea2:	4b85      	ldr	r3, [pc, #532]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d112      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eae:	4b82      	ldr	r3, [pc, #520]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eba:	d10b      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d05b      	beq.n	8002f80 <HAL_RCC_OscConfig+0x108>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d157      	bne.n	8002f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e242      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002edc:	d106      	bne.n	8002eec <HAL_RCC_OscConfig+0x74>
 8002ede:	4b76      	ldr	r3, [pc, #472]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a75      	ldr	r2, [pc, #468]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e01d      	b.n	8002f28 <HAL_RCC_OscConfig+0xb0>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x98>
 8002ef6:	4b70      	ldr	r3, [pc, #448]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6f      	ldr	r2, [pc, #444]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b6d      	ldr	r3, [pc, #436]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a6c      	ldr	r2, [pc, #432]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e00b      	b.n	8002f28 <HAL_RCC_OscConfig+0xb0>
 8002f10:	4b69      	ldr	r3, [pc, #420]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a68      	ldr	r2, [pc, #416]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b66      	ldr	r3, [pc, #408]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a65      	ldr	r2, [pc, #404]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d013      	beq.n	8002f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe f800 	bl	8000f34 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fd fffc 	bl	8000f34 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	@ 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e207      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0xc0>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fd ffec 	bl	8000f34 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f60:	f7fd ffe8 	bl	8000f34 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	@ 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e1f3      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f72:	4b51      	ldr	r3, [pc, #324]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0xe8>
 8002f7e:	e000      	b.n	8002f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d063      	beq.n	8003056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 030c 	and.w	r3, r3, #12
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9a:	4b47      	ldr	r3, [pc, #284]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d11c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa6:	4b44      	ldr	r3, [pc, #272]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d116      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	4b41      	ldr	r3, [pc, #260]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_RCC_OscConfig+0x152>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e1c7      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fca:	4b3b      	ldr	r3, [pc, #236]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4937      	ldr	r1, [pc, #220]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fde:	e03a      	b.n	8003056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d020      	beq.n	800302a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe8:	4b34      	ldr	r3, [pc, #208]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fd ffa1 	bl	8000f34 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7fd ff9d 	bl	8000f34 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1a8      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003008:	4b2b      	ldr	r3, [pc, #172]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	4b28      	ldr	r3, [pc, #160]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4925      	ldr	r1, [pc, #148]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]
 8003028:	e015      	b.n	8003056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302a:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <HAL_RCC_OscConfig+0x244>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fd ff80 	bl	8000f34 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003038:	f7fd ff7c 	bl	8000f34 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e187      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304a:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d036      	beq.n	80030d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306a:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <HAL_RCC_OscConfig+0x248>)
 800306c:	2201      	movs	r2, #1
 800306e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fd ff60 	bl	8000f34 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003078:	f7fd ff5c 	bl	8000f34 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e167      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308a:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCC_OscConfig+0x240>)
 800308c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x200>
 8003096:	e01b      	b.n	80030d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003098:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_RCC_OscConfig+0x248>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309e:	f7fd ff49 	bl	8000f34 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a4:	e00e      	b.n	80030c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a6:	f7fd ff45 	bl	8000f34 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d907      	bls.n	80030c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e150      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
 80030b8:	40023800 	.word	0x40023800
 80030bc:	42470000 	.word	0x42470000
 80030c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	4b88      	ldr	r3, [pc, #544]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80030c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1ea      	bne.n	80030a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8097 	beq.w	800320c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e2:	4b81      	ldr	r3, [pc, #516]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	4b7d      	ldr	r3, [pc, #500]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	4a7c      	ldr	r2, [pc, #496]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80030f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030fe:	4b7a      	ldr	r3, [pc, #488]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b77      	ldr	r3, [pc, #476]	@ (80032ec <HAL_RCC_OscConfig+0x474>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d118      	bne.n	800314c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311a:	4b74      	ldr	r3, [pc, #464]	@ (80032ec <HAL_RCC_OscConfig+0x474>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a73      	ldr	r2, [pc, #460]	@ (80032ec <HAL_RCC_OscConfig+0x474>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003126:	f7fd ff05 	bl	8000f34 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fd ff01 	bl	8000f34 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e10c      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b6a      	ldr	r3, [pc, #424]	@ (80032ec <HAL_RCC_OscConfig+0x474>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x2ea>
 8003154:	4b64      	ldr	r3, [pc, #400]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003158:	4a63      	ldr	r2, [pc, #396]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003160:	e01c      	b.n	800319c <HAL_RCC_OscConfig+0x324>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b05      	cmp	r3, #5
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x30c>
 800316a:	4b5f      	ldr	r3, [pc, #380]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316e:	4a5e      	ldr	r2, [pc, #376]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	6713      	str	r3, [r2, #112]	@ 0x70
 8003176:	4b5c      	ldr	r3, [pc, #368]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317a:	4a5b      	ldr	r2, [pc, #364]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6713      	str	r3, [r2, #112]	@ 0x70
 8003182:	e00b      	b.n	800319c <HAL_RCC_OscConfig+0x324>
 8003184:	4b58      	ldr	r3, [pc, #352]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003188:	4a57      	ldr	r2, [pc, #348]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003190:	4b55      	ldr	r3, [pc, #340]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003194:	4a54      	ldr	r2, [pc, #336]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003196:	f023 0304 	bic.w	r3, r3, #4
 800319a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d015      	beq.n	80031d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fd fec6 	bl	8000f34 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ac:	f7fd fec2 	bl	8000f34 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0cb      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c2:	4b49      	ldr	r3, [pc, #292]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0ee      	beq.n	80031ac <HAL_RCC_OscConfig+0x334>
 80031ce:	e014      	b.n	80031fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d0:	f7fd feb0 	bl	8000f34 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7fd feac 	bl	8000f34 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e0b5      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ee:	4b3e      	ldr	r3, [pc, #248]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1ee      	bne.n	80031d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003200:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	4a38      	ldr	r2, [pc, #224]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80a1 	beq.w	8003358 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003216:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b08      	cmp	r3, #8
 8003220:	d05c      	beq.n	80032dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d141      	bne.n	80032ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b31      	ldr	r3, [pc, #196]	@ (80032f0 <HAL_RCC_OscConfig+0x478>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fd fe80 	bl	8000f34 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7fd fe7c 	bl	8000f34 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e087      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	4b27      	ldr	r3, [pc, #156]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	019b      	lsls	r3, r3, #6
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	3b01      	subs	r3, #1
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	491b      	ldr	r1, [pc, #108]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003280:	4b1b      	ldr	r3, [pc, #108]	@ (80032f0 <HAL_RCC_OscConfig+0x478>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003286:	f7fd fe55 	bl	8000f34 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328e:	f7fd fe51 	bl	8000f34 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e05c      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a0:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x416>
 80032ac:	e054      	b.n	8003358 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <HAL_RCC_OscConfig+0x478>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fd fe3e 	bl	8000f34 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fd fe3a 	bl	8000f34 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e045      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_RCC_OscConfig+0x470>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x444>
 80032da:	e03d      	b.n	8003358 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e038      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40007000 	.word	0x40007000
 80032f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <HAL_RCC_OscConfig+0x4ec>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d028      	beq.n	8003354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d121      	bne.n	8003354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	429a      	cmp	r2, r3
 800331c:	d11a      	bne.n	8003354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003324:	4013      	ands	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800332a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800332c:	4293      	cmp	r3, r2
 800332e:	d111      	bne.n	8003354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	3b01      	subs	r3, #1
 800333e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d107      	bne.n	8003354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800

08003368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0cc      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800337c:	4b68      	ldr	r3, [pc, #416]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d90c      	bls.n	80033a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b65      	ldr	r3, [pc, #404]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b63      	ldr	r3, [pc, #396]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0b8      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d020      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033bc:	4b59      	ldr	r3, [pc, #356]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a58      	ldr	r2, [pc, #352]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d4:	4b53      	ldr	r3, [pc, #332]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a52      	ldr	r2, [pc, #328]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e0:	4b50      	ldr	r3, [pc, #320]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	494d      	ldr	r1, [pc, #308]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d044      	beq.n	8003488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b47      	ldr	r3, [pc, #284]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d119      	bne.n	8003446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e07f      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d003      	beq.n	8003426 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003422:	2b03      	cmp	r3, #3
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003426:	4b3f      	ldr	r3, [pc, #252]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e06f      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003436:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e067      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003446:	4b37      	ldr	r3, [pc, #220]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f023 0203 	bic.w	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4934      	ldr	r1, [pc, #208]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	4313      	orrs	r3, r2
 8003456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003458:	f7fd fd6c 	bl	8000f34 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	e00a      	b.n	8003476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003460:	f7fd fd68 	bl	8000f34 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e04f      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 020c 	and.w	r2, r3, #12
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	429a      	cmp	r2, r3
 8003486:	d1eb      	bne.n	8003460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003488:	4b25      	ldr	r3, [pc, #148]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d20c      	bcs.n	80034b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b22      	ldr	r3, [pc, #136]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e032      	b.n	8003516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034bc:	4b19      	ldr	r3, [pc, #100]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4916      	ldr	r1, [pc, #88]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034da:	4b12      	ldr	r3, [pc, #72]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	490e      	ldr	r1, [pc, #56]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ee:	f000 f821 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80034f2:	4602      	mov	r2, r0
 80034f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003524 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	490a      	ldr	r1, [pc, #40]	@ (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 8003500:	5ccb      	ldrb	r3, [r1, r3]
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	4a09      	ldr	r2, [pc, #36]	@ (800352c <HAL_RCC_ClockConfig+0x1c4>)
 8003508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800350a:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <HAL_RCC_ClockConfig+0x1c8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd fccc 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40023c00 	.word	0x40023c00
 8003524:	40023800 	.word	0x40023800
 8003528:	080085b8 	.word	0x080085b8
 800352c:	20000000 	.word	0x20000000
 8003530:	20000004 	.word	0x20000004

08003534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003538:	b090      	sub	sp, #64	@ 0x40
 800353a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003540:	2300      	movs	r3, #0
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003544:	2300      	movs	r3, #0
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800354c:	4b59      	ldr	r3, [pc, #356]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b08      	cmp	r3, #8
 8003556:	d00d      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x40>
 8003558:	2b08      	cmp	r3, #8
 800355a:	f200 80a1 	bhi.w	80036a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x34>
 8003562:	2b04      	cmp	r3, #4
 8003564:	d003      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x3a>
 8003566:	e09b      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003568:	4b53      	ldr	r3, [pc, #332]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800356a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800356c:	e09b      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800356e:	4b53      	ldr	r3, [pc, #332]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x188>)
 8003570:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003572:	e098      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003574:	4b4f      	ldr	r3, [pc, #316]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800357c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800357e:	4b4d      	ldr	r3, [pc, #308]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d028      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358a:	4b4a      	ldr	r3, [pc, #296]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	099b      	lsrs	r3, r3, #6
 8003590:	2200      	movs	r2, #0
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	627a      	str	r2, [r7, #36]	@ 0x24
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800359c:	2100      	movs	r1, #0
 800359e:	4b47      	ldr	r3, [pc, #284]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x188>)
 80035a0:	fb03 f201 	mul.w	r2, r3, r1
 80035a4:	2300      	movs	r3, #0
 80035a6:	fb00 f303 	mul.w	r3, r0, r3
 80035aa:	4413      	add	r3, r2
 80035ac:	4a43      	ldr	r2, [pc, #268]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x188>)
 80035ae:	fba0 1202 	umull	r1, r2, r0, r2
 80035b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035b4:	460a      	mov	r2, r1
 80035b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ba:	4413      	add	r3, r2
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	2200      	movs	r2, #0
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	61fa      	str	r2, [r7, #28]
 80035c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80035ce:	f7fc fe0b 	bl	80001e8 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4613      	mov	r3, r2
 80035d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035da:	e053      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035dc:	4b35      	ldr	r3, [pc, #212]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	2200      	movs	r2, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	617a      	str	r2, [r7, #20]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035ee:	f04f 0b00 	mov.w	fp, #0
 80035f2:	4652      	mov	r2, sl
 80035f4:	465b      	mov	r3, fp
 80035f6:	f04f 0000 	mov.w	r0, #0
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	0159      	lsls	r1, r3, #5
 8003600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003604:	0150      	lsls	r0, r2, #5
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	ebb2 080a 	subs.w	r8, r2, sl
 800360e:	eb63 090b 	sbc.w	r9, r3, fp
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800361e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003622:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003626:	ebb2 0408 	subs.w	r4, r2, r8
 800362a:	eb63 0509 	sbc.w	r5, r3, r9
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	00eb      	lsls	r3, r5, #3
 8003638:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800363c:	00e2      	lsls	r2, r4, #3
 800363e:	4614      	mov	r4, r2
 8003640:	461d      	mov	r5, r3
 8003642:	eb14 030a 	adds.w	r3, r4, sl
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	eb45 030b 	adc.w	r3, r5, fp
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800365a:	4629      	mov	r1, r5
 800365c:	028b      	lsls	r3, r1, #10
 800365e:	4621      	mov	r1, r4
 8003660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003664:	4621      	mov	r1, r4
 8003666:	028a      	lsls	r2, r1, #10
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366e:	2200      	movs	r2, #0
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	60fa      	str	r2, [r7, #12]
 8003674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003678:	f7fc fdb6 	bl	80001e8 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4613      	mov	r3, r2
 8003682:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003684:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	3301      	adds	r3, #1
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003694:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800369e:	e002      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80036a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3740      	adds	r7, #64	@ 0x40
 80036ac:	46bd      	mov	sp, r7
 80036ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	00f42400 	.word	0x00f42400
 80036bc:	017d7840 	.word	0x017d7840

080036c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000000 	.word	0x20000000

080036d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07b      	b.n	80037e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d108      	bne.n	8003704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036fa:	d009      	beq.n	8003710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	61da      	str	r2, [r3, #28]
 8003702:	e005      	b.n	8003710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd fa4a 	bl	8000bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003746:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003794:	ea42 0103 	orr.w	r1, r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	f003 0104 	and.w	r1, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	f003 0210 	and.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e041      	b.n	8003880 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7fd fa1f 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f000 fac1 	bl	8003db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e041      	b.n	800391e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f839 	bl	8003926 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f000 fa72 	bl	8003db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d109      	bne.n	8003960 <HAL_TIM_PWM_Start+0x24>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e022      	b.n	80039a6 <HAL_TIM_PWM_Start+0x6a>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b04      	cmp	r3, #4
 8003964:	d109      	bne.n	800397a <HAL_TIM_PWM_Start+0x3e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	e015      	b.n	80039a6 <HAL_TIM_PWM_Start+0x6a>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d109      	bne.n	8003994 <HAL_TIM_PWM_Start+0x58>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e008      	b.n	80039a6 <HAL_TIM_PWM_Start+0x6a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b01      	cmp	r3, #1
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e068      	b.n	8003a80 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d104      	bne.n	80039be <HAL_TIM_PWM_Start+0x82>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039bc:	e013      	b.n	80039e6 <HAL_TIM_PWM_Start+0xaa>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_PWM_Start+0x92>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039cc:	e00b      	b.n	80039e6 <HAL_TIM_PWM_Start+0xaa>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d104      	bne.n	80039de <HAL_TIM_PWM_Start+0xa2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039dc:	e003      	b.n	80039e6 <HAL_TIM_PWM_Start+0xaa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2201      	movs	r2, #1
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fc90 	bl	8004314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a23      	ldr	r2, [pc, #140]	@ (8003a88 <HAL_TIM_PWM_Start+0x14c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d107      	bne.n	8003a0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1d      	ldr	r2, [pc, #116]	@ (8003a88 <HAL_TIM_PWM_Start+0x14c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d018      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x10e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a20:	d013      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x10e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a19      	ldr	r2, [pc, #100]	@ (8003a8c <HAL_TIM_PWM_Start+0x150>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x10e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a17      	ldr	r2, [pc, #92]	@ (8003a90 <HAL_TIM_PWM_Start+0x154>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x10e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a16      	ldr	r2, [pc, #88]	@ (8003a94 <HAL_TIM_PWM_Start+0x158>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x10e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a14      	ldr	r2, [pc, #80]	@ (8003a98 <HAL_TIM_PWM_Start+0x15c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d111      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d010      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6c:	e007      	b.n	8003a7e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40014000 	.word	0x40014000

08003a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0ae      	b.n	8003c18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	f200 809f 	bhi.w	8003c08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aca:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003b05 	.word	0x08003b05
 8003ad4:	08003c09 	.word	0x08003c09
 8003ad8:	08003c09 	.word	0x08003c09
 8003adc:	08003c09 	.word	0x08003c09
 8003ae0:	08003b45 	.word	0x08003b45
 8003ae4:	08003c09 	.word	0x08003c09
 8003ae8:	08003c09 	.word	0x08003c09
 8003aec:	08003c09 	.word	0x08003c09
 8003af0:	08003b87 	.word	0x08003b87
 8003af4:	08003c09 	.word	0x08003c09
 8003af8:	08003c09 	.word	0x08003c09
 8003afc:	08003c09 	.word	0x08003c09
 8003b00:	08003bc7 	.word	0x08003bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f9dc 	bl	8003ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0208 	orr.w	r2, r2, #8
 8003b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6999      	ldr	r1, [r3, #24]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	619a      	str	r2, [r3, #24]
      break;
 8003b42:	e064      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fa22 	bl	8003f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6999      	ldr	r1, [r3, #24]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]
      break;
 8003b84:	e043      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fa6d 	bl	800406c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0208 	orr.w	r2, r2, #8
 8003ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0204 	bic.w	r2, r2, #4
 8003bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69d9      	ldr	r1, [r3, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	61da      	str	r2, [r3, #28]
      break;
 8003bc4:	e023      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fab7 	bl	8004140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	021a      	lsls	r2, r3, #8
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	61da      	str	r2, [r3, #28]
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_TIM_ConfigClockSource+0x1c>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e0b4      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x186>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c74:	d03e      	beq.n	8003cf4 <HAL_TIM_ConfigClockSource+0xd4>
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c7a:	f200 8087 	bhi.w	8003d8c <HAL_TIM_ConfigClockSource+0x16c>
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c82:	f000 8086 	beq.w	8003d92 <HAL_TIM_ConfigClockSource+0x172>
 8003c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8a:	d87f      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x16c>
 8003c8c:	2b70      	cmp	r3, #112	@ 0x70
 8003c8e:	d01a      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0xa6>
 8003c90:	2b70      	cmp	r3, #112	@ 0x70
 8003c92:	d87b      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x16c>
 8003c94:	2b60      	cmp	r3, #96	@ 0x60
 8003c96:	d050      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0x11a>
 8003c98:	2b60      	cmp	r3, #96	@ 0x60
 8003c9a:	d877      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b50      	cmp	r3, #80	@ 0x50
 8003c9e:	d03c      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0xfa>
 8003ca0:	2b50      	cmp	r3, #80	@ 0x50
 8003ca2:	d873      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b40      	cmp	r3, #64	@ 0x40
 8003ca6:	d058      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x13a>
 8003ca8:	2b40      	cmp	r3, #64	@ 0x40
 8003caa:	d86f      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b30      	cmp	r3, #48	@ 0x30
 8003cae:	d064      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x15a>
 8003cb0:	2b30      	cmp	r3, #48	@ 0x30
 8003cb2:	d86b      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d060      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x15a>
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d867      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d05c      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x15a>
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d05a      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x15a>
 8003cc4:	e062      	b.n	8003d8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cd6:	f000 fafd 	bl	80042d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	609a      	str	r2, [r3, #8]
      break;
 8003cf2:	e04f      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d04:	f000 fae6 	bl	80042d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d16:	609a      	str	r2, [r3, #8]
      break;
 8003d18:	e03c      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d26:	461a      	mov	r2, r3
 8003d28:	f000 fa5a 	bl	80041e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2150      	movs	r1, #80	@ 0x50
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fab3 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003d38:	e02c      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d46:	461a      	mov	r2, r3
 8003d48:	f000 fa79 	bl	800423e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2160      	movs	r1, #96	@ 0x60
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 faa3 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003d58:	e01c      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d66:	461a      	mov	r2, r3
 8003d68:	f000 fa3a 	bl	80041e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2140      	movs	r1, #64	@ 0x40
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fa93 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003d78:	e00c      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4619      	mov	r1, r3
 8003d84:	4610      	mov	r0, r2
 8003d86:	f000 fa8a 	bl	800429e <TIM_ITRx_SetConfig>
      break;
 8003d8a:	e003      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d90:	e000      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a3a      	ldr	r2, [pc, #232]	@ (8003eac <TIM_Base_SetConfig+0xfc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00f      	beq.n	8003de8 <TIM_Base_SetConfig+0x38>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dce:	d00b      	beq.n	8003de8 <TIM_Base_SetConfig+0x38>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a37      	ldr	r2, [pc, #220]	@ (8003eb0 <TIM_Base_SetConfig+0x100>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_Base_SetConfig+0x38>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a36      	ldr	r2, [pc, #216]	@ (8003eb4 <TIM_Base_SetConfig+0x104>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0x38>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a35      	ldr	r2, [pc, #212]	@ (8003eb8 <TIM_Base_SetConfig+0x108>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a2b      	ldr	r2, [pc, #172]	@ (8003eac <TIM_Base_SetConfig+0xfc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01b      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e08:	d017      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a28      	ldr	r2, [pc, #160]	@ (8003eb0 <TIM_Base_SetConfig+0x100>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a27      	ldr	r2, [pc, #156]	@ (8003eb4 <TIM_Base_SetConfig+0x104>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00f      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a26      	ldr	r2, [pc, #152]	@ (8003eb8 <TIM_Base_SetConfig+0x108>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a25      	ldr	r2, [pc, #148]	@ (8003ebc <TIM_Base_SetConfig+0x10c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a24      	ldr	r2, [pc, #144]	@ (8003ec0 <TIM_Base_SetConfig+0x110>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_Base_SetConfig+0x8a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a23      	ldr	r2, [pc, #140]	@ (8003ec4 <TIM_Base_SetConfig+0x114>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a0e      	ldr	r2, [pc, #56]	@ (8003eac <TIM_Base_SetConfig+0xfc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d103      	bne.n	8003e80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d105      	bne.n	8003e9e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f023 0201 	bic.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	611a      	str	r2, [r3, #16]
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800

08003ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f023 0201 	bic.w	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0303 	bic.w	r3, r3, #3
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f023 0302 	bic.w	r3, r3, #2
 8003f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003f90 <TIM_OC1_SetConfig+0xc8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10c      	bne.n	8003f3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f023 0308 	bic.w	r3, r3, #8
 8003f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f023 0304 	bic.w	r3, r3, #4
 8003f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a13      	ldr	r2, [pc, #76]	@ (8003f90 <TIM_OC1_SetConfig+0xc8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d111      	bne.n	8003f6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	621a      	str	r2, [r3, #32]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40010000 	.word	0x40010000

08003f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f023 0210 	bic.w	r2, r3, #16
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f023 0320 	bic.w	r3, r3, #32
 8003fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a1e      	ldr	r2, [pc, #120]	@ (8004068 <TIM_OC2_SetConfig+0xd4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d10d      	bne.n	8004010 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800400e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a15      	ldr	r2, [pc, #84]	@ (8004068 <TIM_OC2_SetConfig+0xd4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d113      	bne.n	8004040 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800401e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000

0800406c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0303 	bic.w	r3, r3, #3
 80040a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1d      	ldr	r2, [pc, #116]	@ (800413c <TIM_OC3_SetConfig+0xd0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10d      	bne.n	80040e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a14      	ldr	r2, [pc, #80]	@ (800413c <TIM_OC3_SetConfig+0xd0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d113      	bne.n	8004116 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	621a      	str	r2, [r3, #32]
}
 8004130:	bf00      	nop
 8004132:	371c      	adds	r7, #28
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	40010000 	.word	0x40010000

08004140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800418a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	031b      	lsls	r3, r3, #12
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a10      	ldr	r2, [pc, #64]	@ (80041dc <TIM_OC4_SetConfig+0x9c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d109      	bne.n	80041b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	019b      	lsls	r3, r3, #6
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	621a      	str	r2, [r3, #32]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40010000 	.word	0x40010000

080041e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800420a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 030a 	bic.w	r3, r3, #10
 800421c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	621a      	str	r2, [r3, #32]
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f023 0210 	bic.w	r2, r3, #16
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800427a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f043 0307 	orr.w	r3, r3, #7
 80042c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	021a      	lsls	r2, r3, #8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2201      	movs	r2, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1a      	ldr	r2, [r3, #32]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	43db      	mvns	r3, r3
 8004336:	401a      	ands	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1a      	ldr	r2, [r3, #32]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	431a      	orrs	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004374:	2302      	movs	r3, #2
 8004376:	e050      	b.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d018      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c4:	d013      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a18      	ldr	r2, [pc, #96]	@ (800442c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a16      	ldr	r2, [pc, #88]	@ (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a15      	ldr	r2, [pc, #84]	@ (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a13      	ldr	r2, [pc, #76]	@ (8004438 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d10c      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40014000 	.word	0x40014000

0800443c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004454:	2302      	movs	r3, #2
 8004456:	e03d      	b.n	80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044e0:	b084      	sub	sp, #16
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	f107 001c 	add.w	r0, r7, #28
 80044ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d123      	bne.n	8004542 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800450e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004522:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004526:	2b01      	cmp	r3, #1
 8004528:	d105      	bne.n	8004536 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f001 fae2 	bl	8005b00 <USB_CoreReset>
 800453c:	4603      	mov	r3, r0
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e01b      	b.n	800457a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 fad6 	bl	8005b00 <USB_CoreReset>
 8004554:	4603      	mov	r3, r0
 8004556:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004558:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	639a      	str	r2, [r3, #56]	@ 0x38
 800456c:	e005      	b.n	800457a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004572:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800457a:	7fbb      	ldrb	r3, [r7, #30]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10b      	bne.n	8004598 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f043 0206 	orr.w	r2, r3, #6
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a4:	b004      	add	sp, #16
 80045a6:	4770      	bx	lr

080045a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d165      	bne.n	8004688 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4a41      	ldr	r2, [pc, #260]	@ (80046c4 <USB_SetTurnaroundTime+0x11c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d906      	bls.n	80045d2 <USB_SetTurnaroundTime+0x2a>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4a40      	ldr	r2, [pc, #256]	@ (80046c8 <USB_SetTurnaroundTime+0x120>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d202      	bcs.n	80045d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045cc:	230f      	movs	r3, #15
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	e062      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4a3c      	ldr	r2, [pc, #240]	@ (80046c8 <USB_SetTurnaroundTime+0x120>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d306      	bcc.n	80045e8 <USB_SetTurnaroundTime+0x40>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4a3b      	ldr	r2, [pc, #236]	@ (80046cc <USB_SetTurnaroundTime+0x124>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d202      	bcs.n	80045e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045e2:	230e      	movs	r3, #14
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e057      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a38      	ldr	r2, [pc, #224]	@ (80046cc <USB_SetTurnaroundTime+0x124>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d306      	bcc.n	80045fe <USB_SetTurnaroundTime+0x56>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4a37      	ldr	r2, [pc, #220]	@ (80046d0 <USB_SetTurnaroundTime+0x128>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d202      	bcs.n	80045fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045f8:	230d      	movs	r3, #13
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e04c      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	4a33      	ldr	r2, [pc, #204]	@ (80046d0 <USB_SetTurnaroundTime+0x128>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d306      	bcc.n	8004614 <USB_SetTurnaroundTime+0x6c>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4a32      	ldr	r2, [pc, #200]	@ (80046d4 <USB_SetTurnaroundTime+0x12c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d802      	bhi.n	8004614 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800460e:	230c      	movs	r3, #12
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e041      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a2f      	ldr	r2, [pc, #188]	@ (80046d4 <USB_SetTurnaroundTime+0x12c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d906      	bls.n	800462a <USB_SetTurnaroundTime+0x82>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a2e      	ldr	r2, [pc, #184]	@ (80046d8 <USB_SetTurnaroundTime+0x130>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d802      	bhi.n	800462a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004624:	230b      	movs	r3, #11
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e036      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <USB_SetTurnaroundTime+0x130>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d906      	bls.n	8004640 <USB_SetTurnaroundTime+0x98>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a29      	ldr	r2, [pc, #164]	@ (80046dc <USB_SetTurnaroundTime+0x134>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d802      	bhi.n	8004640 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800463a:	230a      	movs	r3, #10
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e02b      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4a26      	ldr	r2, [pc, #152]	@ (80046dc <USB_SetTurnaroundTime+0x134>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d906      	bls.n	8004656 <USB_SetTurnaroundTime+0xae>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a25      	ldr	r2, [pc, #148]	@ (80046e0 <USB_SetTurnaroundTime+0x138>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d202      	bcs.n	8004656 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004650:	2309      	movs	r3, #9
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e020      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4a21      	ldr	r2, [pc, #132]	@ (80046e0 <USB_SetTurnaroundTime+0x138>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d306      	bcc.n	800466c <USB_SetTurnaroundTime+0xc4>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a20      	ldr	r2, [pc, #128]	@ (80046e4 <USB_SetTurnaroundTime+0x13c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d802      	bhi.n	800466c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004666:	2308      	movs	r3, #8
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e015      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <USB_SetTurnaroundTime+0x13c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d906      	bls.n	8004682 <USB_SetTurnaroundTime+0xda>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a1c      	ldr	r2, [pc, #112]	@ (80046e8 <USB_SetTurnaroundTime+0x140>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d202      	bcs.n	8004682 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800467c:	2307      	movs	r3, #7
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e00a      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004682:	2306      	movs	r3, #6
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e007      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800468e:	2309      	movs	r3, #9
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e001      	b.n	8004698 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004694:	2309      	movs	r3, #9
 8004696:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	029b      	lsls	r3, r3, #10
 80046ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80046b0:	431a      	orrs	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	00d8acbf 	.word	0x00d8acbf
 80046c8:	00e4e1c0 	.word	0x00e4e1c0
 80046cc:	00f42400 	.word	0x00f42400
 80046d0:	01067380 	.word	0x01067380
 80046d4:	011a499f 	.word	0x011a499f
 80046d8:	01312cff 	.word	0x01312cff
 80046dc:	014ca43f 	.word	0x014ca43f
 80046e0:	016e3600 	.word	0x016e3600
 80046e4:	01a6ab1f 	.word	0x01a6ab1f
 80046e8:	01e84800 	.word	0x01e84800

080046ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f043 0201 	orr.w	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d115      	bne.n	800477e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800475e:	200a      	movs	r0, #10
 8004760:	f7fc fbf4 	bl	8000f4c <HAL_Delay>
      ms += 10U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	330a      	adds	r3, #10
 8004768:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f001 f939 	bl	80059e2 <USB_GetMode>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d01e      	beq.n	80047b4 <USB_SetCurrentMode+0x84>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2bc7      	cmp	r3, #199	@ 0xc7
 800477a:	d9f0      	bls.n	800475e <USB_SetCurrentMode+0x2e>
 800477c:	e01a      	b.n	80047b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d115      	bne.n	80047b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004790:	200a      	movs	r0, #10
 8004792:	f7fc fbdb 	bl	8000f4c <HAL_Delay>
      ms += 10U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	330a      	adds	r3, #10
 800479a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f001 f920 	bl	80059e2 <USB_GetMode>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <USB_SetCurrentMode+0x84>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80047ac:	d9f0      	bls.n	8004790 <USB_SetCurrentMode+0x60>
 80047ae:	e001      	b.n	80047b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e005      	b.n	80047c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80047b8:	d101      	bne.n	80047be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047c8:	b084      	sub	sp, #16
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80047d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	e009      	b.n	80047fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3340      	adds	r3, #64	@ 0x40
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3301      	adds	r3, #1
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b0e      	cmp	r3, #14
 8004800:	d9f2      	bls.n	80047e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004802:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004806:	2b00      	cmp	r3, #0
 8004808:	d11c      	bne.n	8004844 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004818:	f043 0302 	orr.w	r3, r3, #2
 800481c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	@ 0x38
 8004842:	e00b      	b.n	800485c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004848:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004862:	461a      	mov	r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004868:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800486c:	2b01      	cmp	r3, #1
 800486e:	d10d      	bne.n	800488c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004878:	2100      	movs	r1, #0
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f968 	bl	8004b50 <USB_SetDevSpeed>
 8004880:	e008      	b.n	8004894 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004882:	2101      	movs	r1, #1
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f963 	bl	8004b50 <USB_SetDevSpeed>
 800488a:	e003      	b.n	8004894 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800488c:	2103      	movs	r1, #3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f95e 	bl	8004b50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004894:	2110      	movs	r1, #16
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f8fa 	bl	8004a90 <USB_FlushTxFifo>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f924 	bl	8004af4 <USB_FlushRxFifo>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048bc:	461a      	mov	r2, r3
 80048be:	2300      	movs	r3, #0
 80048c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c8:	461a      	mov	r2, r3
 80048ca:	2300      	movs	r3, #0
 80048cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d4:	461a      	mov	r2, r3
 80048d6:	2300      	movs	r3, #0
 80048d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e043      	b.n	8004968 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048f6:	d118      	bne.n	800492a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490a:	461a      	mov	r2, r3
 800490c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e013      	b.n	800493c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004920:	461a      	mov	r2, r3
 8004922:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e008      	b.n	800493c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004936:	461a      	mov	r2, r3
 8004938:	2300      	movs	r3, #0
 800493a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004948:	461a      	mov	r2, r3
 800494a:	2300      	movs	r3, #0
 800494c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800495a:	461a      	mov	r2, r3
 800495c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004960:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3301      	adds	r3, #1
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800496c:	461a      	mov	r2, r3
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4293      	cmp	r3, r2
 8004972:	d3b5      	bcc.n	80048e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	e043      	b.n	8004a02 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800498c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004990:	d118      	bne.n	80049c4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a4:	461a      	mov	r2, r3
 80049a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	e013      	b.n	80049d6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ba:	461a      	mov	r2, r3
 80049bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e008      	b.n	80049d6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d0:	461a      	mov	r2, r3
 80049d2:	2300      	movs	r3, #0
 80049d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e2:	461a      	mov	r2, r3
 80049e4:	2300      	movs	r3, #0
 80049e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f4:	461a      	mov	r2, r3
 80049f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	3301      	adds	r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a06:	461a      	mov	r2, r3
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d3b5      	bcc.n	800497a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f043 0210 	orr.w	r2, r3, #16
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	4b10      	ldr	r3, [pc, #64]	@ (8004a8c <USB_DevInit+0x2c4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f043 0208 	orr.w	r2, r3, #8
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d107      	bne.n	8004a7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a74:	f043 0304 	orr.w	r3, r3, #4
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a88:	b004      	add	sp, #16
 8004a8a:	4770      	bx	lr
 8004a8c:	803c3800 	.word	0x803c3800

08004a90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aaa:	d901      	bls.n	8004ab0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e01b      	b.n	8004ae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	daf2      	bge.n	8004a9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	019b      	lsls	r3, r3, #6
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ad4:	d901      	bls.n	8004ada <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e006      	b.n	8004ae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d0f0      	beq.n	8004ac8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3301      	adds	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b0c:	d901      	bls.n	8004b12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e018      	b.n	8004b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	daf2      	bge.n	8004b00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2210      	movs	r2, #16
 8004b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b30:	d901      	bls.n	8004b36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e006      	b.n	8004b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d0f0      	beq.n	8004b24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b70:	4313      	orrs	r3, r2
 8004b72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b087      	sub	sp, #28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0306 	and.w	r3, r3, #6
 8004b9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	75fb      	strb	r3, [r7, #23]
 8004ba6:	e00a      	b.n	8004bbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d002      	beq.n	8004bb4 <USB_GetDevSpeed+0x32>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d102      	bne.n	8004bba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	75fb      	strb	r3, [r7, #23]
 8004bb8:	e001      	b.n	8004bbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bba:	230f      	movs	r3, #15
 8004bbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d13a      	bne.n	8004c5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	68f9      	ldr	r1, [r7, #12]
 8004c02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d155      	bne.n	8004ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	791b      	ldrb	r3, [r3, #4]
 8004c3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	059b      	lsls	r3, r3, #22
 8004c42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c44:	4313      	orrs	r3, r2
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	e036      	b.n	8004ccc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d11a      	bne.n	8004ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	791b      	ldrb	r3, [r3, #4]
 8004cb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d161      	bne.n	8004dbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d0e:	d11f      	bne.n	8004d50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	2101      	movs	r1, #1
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d70:	4013      	ands	r3, r2
 8004d72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d94:	4013      	ands	r3, r2
 8004d96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	0159      	lsls	r1, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	440b      	add	r3, r1
 8004dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db2:	4619      	mov	r1, r3
 8004db4:	4b35      	ldr	r3, [pc, #212]	@ (8004e8c <USB_DeactivateEndpoint+0x1b0>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
 8004dba:	e060      	b.n	8004e7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dd2:	d11f      	bne.n	8004e14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004df2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	2101      	movs	r1, #1
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e34:	4013      	ands	r3, r2
 8004e36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	43db      	mvns	r3, r3
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	0159      	lsls	r1, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	440b      	add	r3, r1
 8004e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e76:	4619      	mov	r1, r3
 8004e78:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <USB_DeactivateEndpoint+0x1b4>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	ec337800 	.word	0xec337800
 8004e90:	eff37800 	.word	0xeff37800

08004e94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	@ 0x28
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	f040 817a 	bne.w	80051aa <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d132      	bne.n	8004f24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ed8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004edc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004efc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f1c:	0cdb      	lsrs	r3, r3, #19
 8004f1e:	04db      	lsls	r3, r3, #19
 8004f20:	6113      	str	r3, [r2, #16]
 8004f22:	e092      	b.n	800504a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f3e:	0cdb      	lsrs	r3, r3, #19
 8004f40:	04db      	lsls	r3, r3, #19
 8004f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f66:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11a      	bne.n	8004fa4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d903      	bls.n	8004f82 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fa0:	6113      	str	r3, [r2, #16]
 8004fa2:	e01b      	b.n	8004fdc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6919      	ldr	r1, [r3, #16]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	440b      	add	r3, r1
 8004fbc:	1e59      	subs	r1, r3, #1
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fc6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fc8:	4ba2      	ldr	r3, [pc, #648]	@ (8005254 <USB_EPStartXfer+0x3c0>)
 8004fca:	400b      	ands	r3, r1
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	0148      	lsls	r0, r1, #5
 8004fd0:	69f9      	ldr	r1, [r7, #28]
 8004fd2:	4401      	add	r1, r0
 8004fd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff2:	69b9      	ldr	r1, [r7, #24]
 8004ff4:	0148      	lsls	r0, r1, #5
 8004ff6:	69f9      	ldr	r1, [r7, #28]
 8004ff8:	4401      	add	r1, r0
 8004ffa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ffe:	4313      	orrs	r3, r2
 8005000:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	791b      	ldrb	r3, [r3, #4]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d11f      	bne.n	800504a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005024:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005028:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	0151      	lsls	r1, r2, #5
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	440a      	add	r2, r1
 8005040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005044:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005048:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d14b      	bne.n	80050e8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005064:	461a      	mov	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	791b      	ldrb	r3, [r3, #4]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d128      	bne.n	80050c6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d110      	bne.n	80050a6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800509e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e00f      	b.n	80050c6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	0151      	lsls	r1, r2, #5
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	440a      	add	r2, r1
 80050dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e165      	b.n	80053b4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005102:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005106:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	791b      	ldrb	r3, [r3, #4]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d015      	beq.n	800513c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 814d 	beq.w	80053b4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	2101      	movs	r1, #1
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	69f9      	ldr	r1, [r7, #28]
 8005132:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005136:	4313      	orrs	r3, r2
 8005138:	634b      	str	r3, [r1, #52]	@ 0x34
 800513a:	e13b      	b.n	80053b4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d110      	bne.n	800516e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005166:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e00f      	b.n	800518e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800518c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	68d9      	ldr	r1, [r3, #12]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	b298      	uxth	r0, r3
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4603      	mov	r3, r0
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f9b8 	bl	8005518 <USB_WritePacket>
 80051a8:	e104      	b.n	80053b4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051c4:	0cdb      	lsrs	r3, r3, #19
 80051c6:	04db      	lsls	r3, r3, #19
 80051c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80051e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80051ec:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d131      	bne.n	8005258 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005222:	69b9      	ldr	r1, [r7, #24]
 8005224:	0148      	lsls	r0, r1, #5
 8005226:	69f9      	ldr	r1, [r7, #28]
 8005228:	4401      	add	r1, r0
 800522a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800522e:	4313      	orrs	r3, r2
 8005230:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800524c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005250:	6113      	str	r3, [r2, #16]
 8005252:	e061      	b.n	8005318 <USB_EPStartXfer+0x484>
 8005254:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d123      	bne.n	80052a8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005276:	69b9      	ldr	r1, [r7, #24]
 8005278:	0148      	lsls	r0, r1, #5
 800527a:	69f9      	ldr	r1, [r7, #28]
 800527c:	4401      	add	r1, r0
 800527e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005282:	4313      	orrs	r3, r2
 8005284:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052a4:	6113      	str	r3, [r2, #16]
 80052a6:	e037      	b.n	8005318 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4413      	add	r3, r2
 80052b2:	1e5a      	subs	r2, r3, #1
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	8afa      	ldrh	r2, [r7, #22]
 80052c4:	fb03 f202 	mul.w	r2, r3, r2
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	8afb      	ldrh	r3, [r7, #22]
 80052dc:	04d9      	lsls	r1, r3, #19
 80052de:	4b38      	ldr	r3, [pc, #224]	@ (80053c0 <USB_EPStartXfer+0x52c>)
 80052e0:	400b      	ands	r3, r1
 80052e2:	69b9      	ldr	r1, [r7, #24]
 80052e4:	0148      	lsls	r0, r1, #5
 80052e6:	69f9      	ldr	r1, [r7, #28]
 80052e8:	4401      	add	r1, r0
 80052ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80052ee:	4313      	orrs	r3, r2
 80052f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005308:	69b9      	ldr	r1, [r7, #24]
 800530a:	0148      	lsls	r0, r1, #5
 800530c:	69f9      	ldr	r1, [r7, #28]
 800530e:	4401      	add	r1, r0
 8005310:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005314:	4313      	orrs	r3, r2
 8005316:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d10d      	bne.n	800533a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68d9      	ldr	r1, [r3, #12]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005336:	460a      	mov	r2, r1
 8005338:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	791b      	ldrb	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d128      	bne.n	8005394 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d110      	bne.n	8005374 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800536c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e00f      	b.n	8005394 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800538e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005392:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	1ff80000 	.word	0x1ff80000

080053c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	785b      	ldrb	r3, [r3, #1]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d14a      	bne.n	8005478 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053fa:	f040 8086 	bne.w	800550a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800541c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005420:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005444:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3301      	adds	r3, #1
 800544a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005452:	4293      	cmp	r3, r2
 8005454:	d902      	bls.n	800545c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	75fb      	strb	r3, [r7, #23]
          break;
 800545a:	e056      	b.n	800550a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005474:	d0e7      	beq.n	8005446 <USB_EPStopXfer+0x82>
 8005476:	e048      	b.n	800550a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800548c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005490:	d13b      	bne.n	800550a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3301      	adds	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d902      	bls.n	80054f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	75fb      	strb	r3, [r7, #23]
          break;
 80054ee:	e00c      	b.n	800550a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005504:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005508:	d0e7      	beq.n	80054da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800550a:	7dfb      	ldrb	r3, [r7, #23]
}
 800550c:	4618      	mov	r0, r3
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005518:	b480      	push	{r7}
 800551a:	b089      	sub	sp, #36	@ 0x24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4611      	mov	r1, r2
 8005524:	461a      	mov	r2, r3
 8005526:	460b      	mov	r3, r1
 8005528:	71fb      	strb	r3, [r7, #7]
 800552a:	4613      	mov	r3, r2
 800552c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005536:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800553a:	2b00      	cmp	r3, #0
 800553c:	d123      	bne.n	8005586 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800553e:	88bb      	ldrh	r3, [r7, #4]
 8005540:	3303      	adds	r3, #3
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e018      	b.n	800557e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	031a      	lsls	r2, r3, #12
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	4413      	add	r3, r2
 8005554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005558:	461a      	mov	r2, r3
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	3301      	adds	r3, #1
 8005564:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	3301      	adds	r3, #1
 800556a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	3301      	adds	r3, #1
 8005570:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3301      	adds	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	3301      	adds	r3, #1
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	d3e2      	bcc.n	800554c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3724      	adds	r7, #36	@ 0x24
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005594:	b480      	push	{r7}
 8005596:	b08b      	sub	sp, #44	@ 0x2c
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	623b      	str	r3, [r7, #32]
 80055be:	e014      	b.n	80055ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ce:	3301      	adds	r3, #1
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	3301      	adds	r3, #1
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	3301      	adds	r3, #1
 80055dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e0:	3301      	adds	r3, #1
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	3301      	adds	r3, #1
 80055e8:	623b      	str	r3, [r7, #32]
 80055ea:	6a3a      	ldr	r2, [r7, #32]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d3e6      	bcc.n	80055c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055f2:	8bfb      	ldrh	r3, [r7, #30]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01e      	beq.n	8005636 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005602:	461a      	mov	r2, r3
 8005604:	f107 0310 	add.w	r3, r7, #16
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
 8005618:	b2da      	uxtb	r2, r3
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	701a      	strb	r2, [r3, #0]
      i++;
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	3301      	adds	r3, #1
 8005622:	623b      	str	r3, [r7, #32]
      pDest++;
 8005624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005626:	3301      	adds	r3, #1
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800562a:	8bfb      	ldrh	r3, [r7, #30]
 800562c:	3b01      	subs	r3, #1
 800562e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005630:	8bfb      	ldrh	r3, [r7, #30]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1ea      	bne.n	800560c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005638:	4618      	mov	r0, r3
 800563a:	372c      	adds	r7, #44	@ 0x2c
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	785b      	ldrb	r3, [r3, #1]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d12c      	bne.n	80056ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	db12      	blt.n	8005698 <USB_EPSetStall+0x54>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00f      	beq.n	8005698 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005692:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005696:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	e02b      	b.n	8005712 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	db12      	blt.n	80056f2 <USB_EPSetStall+0xae>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00f      	beq.n	80056f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800570c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005710:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d128      	bne.n	800578e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005756:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800575a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	791b      	ldrb	r3, [r3, #4]
 8005760:	2b03      	cmp	r3, #3
 8005762:	d003      	beq.n	800576c <USB_EPClearStall+0x4c>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	791b      	ldrb	r3, [r3, #4]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d138      	bne.n	80057de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	e027      	b.n	80057de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	791b      	ldrb	r3, [r3, #4]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d003      	beq.n	80057be <USB_EPClearStall+0x9e>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	791b      	ldrb	r3, [r3, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d10f      	bne.n	80057de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800580a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800580e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005820:	68f9      	ldr	r1, [r7, #12]
 8005822:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005852:	f023 0303 	bic.w	r3, r3, #3
 8005856:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005866:	f023 0302 	bic.w	r3, r3, #2
 800586a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005894:	f023 0303 	bic.w	r3, r3, #3
 8005898:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058a8:	f043 0302 	orr.w	r3, r3, #2
 80058ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058d4:	68fb      	ldr	r3, [r7, #12]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	4013      	ands	r3, r2
 8005904:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	0c1b      	lsrs	r3, r3, #16
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005916:	b480      	push	{r7}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	4013      	ands	r3, r2
 8005938:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	b29b      	uxth	r3, r3
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	4013      	ands	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005978:	68bb      	ldr	r3, [r7, #8]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005986:	b480      	push	{r7}
 8005988:	b087      	sub	sp, #28
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	fa22 f303 	lsr.w	r3, r2, r3
 80059b6:	01db      	lsls	r3, r3, #7
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4013      	ands	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059d4:	68bb      	ldr	r3, [r7, #8]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0301 	and.w	r3, r3, #1
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a18:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a1c:	f023 0307 	bic.w	r3, r3, #7
 8005a20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	333c      	adds	r3, #60	@ 0x3c
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	4a26      	ldr	r2, [pc, #152]	@ (8005afc <USB_EP0_OutStart+0xb8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d90a      	bls.n	8005a7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a78:	d101      	bne.n	8005a7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e037      	b.n	8005aee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a84:	461a      	mov	r2, r3
 8005a86:	2300      	movs	r3, #0
 8005a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aac:	f043 0318 	orr.w	r3, r3, #24
 8005ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ac0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005ac4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ac6:	7afb      	ldrb	r3, [r7, #11]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10f      	bne.n	8005aec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ae6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	4f54300a 	.word	0x4f54300a

08005b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b18:	d901      	bls.n	8005b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e01b      	b.n	8005b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	daf2      	bge.n	8005b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f043 0201 	orr.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b42:	d901      	bls.n	8005b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e006      	b.n	8005b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d0f0      	beq.n	8005b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005b74:	f002 fc78 	bl	8008468 <USBD_static_malloc>
 8005b78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	32b0      	adds	r2, #176	@ 0xb0
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005b90:	2302      	movs	r3, #2
 8005b92:	e0d4      	b.n	8005d3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005b94:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005b98:	2100      	movs	r1, #0
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f002 fca8 	bl	80084f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	32b0      	adds	r2, #176	@ 0xb0
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	32b0      	adds	r2, #176	@ 0xb0
 8005bba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7c1b      	ldrb	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d138      	bne.n	8005c3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8005d48 <USBD_CDC_Init+0x1e4>)
 8005bce:	7819      	ldrb	r1, [r3, #0]
 8005bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f002 fb23 	bl	8008222 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8005d48 <USBD_CDC_Init+0x1e4>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f003 020f 	and.w	r2, r3, #15
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	3324      	adds	r3, #36	@ 0x24
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005bf6:	4b55      	ldr	r3, [pc, #340]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005bf8:	7819      	ldrb	r1, [r3, #0]
 8005bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bfe:	2202      	movs	r2, #2
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f002 fb0e 	bl	8008222 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c06:	4b51      	ldr	r3, [pc, #324]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	f003 020f 	and.w	r2, r3, #15
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005c1e:	2201      	movs	r2, #1
 8005c20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c22:	4b4b      	ldr	r3, [pc, #300]	@ (8005d50 <USBD_CDC_Init+0x1ec>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f003 020f 	and.w	r2, r3, #15
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	3326      	adds	r3, #38	@ 0x26
 8005c38:	2210      	movs	r2, #16
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	e035      	b.n	8005caa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c3e:	4b42      	ldr	r3, [pc, #264]	@ (8005d48 <USBD_CDC_Init+0x1e4>)
 8005c40:	7819      	ldrb	r1, [r3, #0]
 8005c42:	2340      	movs	r3, #64	@ 0x40
 8005c44:	2202      	movs	r2, #2
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f002 faeb 	bl	8008222 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8005d48 <USBD_CDC_Init+0x1e4>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f003 020f 	and.w	r2, r3, #15
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	3324      	adds	r3, #36	@ 0x24
 8005c62:	2201      	movs	r2, #1
 8005c64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c66:	4b39      	ldr	r3, [pc, #228]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005c68:	7819      	ldrb	r1, [r3, #0]
 8005c6a:	2340      	movs	r3, #64	@ 0x40
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f002 fad7 	bl	8008222 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c74:	4b35      	ldr	r3, [pc, #212]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c90:	4b2f      	ldr	r3, [pc, #188]	@ (8005d50 <USBD_CDC_Init+0x1ec>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	f003 020f 	and.w	r2, r3, #15
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3326      	adds	r3, #38	@ 0x26
 8005ca6:	2210      	movs	r2, #16
 8005ca8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005caa:	4b29      	ldr	r3, [pc, #164]	@ (8005d50 <USBD_CDC_Init+0x1ec>)
 8005cac:	7819      	ldrb	r1, [r3, #0]
 8005cae:	2308      	movs	r3, #8
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f002 fab5 	bl	8008222 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005cb8:	4b25      	ldr	r3, [pc, #148]	@ (8005d50 <USBD_CDC_Init+0x1ec>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f003 020f 	and.w	r2, r3, #15
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	3324      	adds	r3, #36	@ 0x24
 8005cce:	2201      	movs	r2, #1
 8005cd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	33b0      	adds	r3, #176	@ 0xb0
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e018      	b.n	8005d3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7c1b      	ldrb	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d14:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005d16:	7819      	ldrb	r1, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f002 fb6c 	bl	8008400 <USBD_LL_PrepareReceive>
 8005d28:	e008      	b.n	8005d3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d2a:	4b08      	ldr	r3, [pc, #32]	@ (8005d4c <USBD_CDC_Init+0x1e8>)
 8005d2c:	7819      	ldrb	r1, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d34:	2340      	movs	r3, #64	@ 0x40
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f002 fb62 	bl	8008400 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000093 	.word	0x20000093
 8005d4c:	20000094 	.word	0x20000094
 8005d50:	20000095 	.word	0x20000095

08005d54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005d60:	4b3a      	ldr	r3, [pc, #232]	@ (8005e4c <USBD_CDC_DeInit+0xf8>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f002 fa81 	bl	800826e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005d6c:	4b37      	ldr	r3, [pc, #220]	@ (8005e4c <USBD_CDC_DeInit+0xf8>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	3324      	adds	r3, #36	@ 0x24
 8005d82:	2200      	movs	r2, #0
 8005d84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d86:	4b32      	ldr	r3, [pc, #200]	@ (8005e50 <USBD_CDC_DeInit+0xfc>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f002 fa6e 	bl	800826e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005d92:	4b2f      	ldr	r3, [pc, #188]	@ (8005e50 <USBD_CDC_DeInit+0xfc>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005daa:	2200      	movs	r2, #0
 8005dac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005dae:	4b29      	ldr	r3, [pc, #164]	@ (8005e54 <USBD_CDC_DeInit+0x100>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f002 fa5a 	bl	800826e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005dba:	4b26      	ldr	r3, [pc, #152]	@ (8005e54 <USBD_CDC_DeInit+0x100>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	f003 020f 	and.w	r2, r3, #15
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	3324      	adds	r3, #36	@ 0x24
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8005e54 <USBD_CDC_DeInit+0x100>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	6879      	ldr	r1, [r7, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	3326      	adds	r3, #38	@ 0x26
 8005dea:	2200      	movs	r2, #0
 8005dec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	32b0      	adds	r2, #176	@ 0xb0
 8005df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01f      	beq.n	8005e40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	33b0      	adds	r3, #176	@ 0xb0
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	32b0      	adds	r2, #176	@ 0xb0
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f002 fb2e 	bl	8008484 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	32b0      	adds	r2, #176	@ 0xb0
 8005e32:	2100      	movs	r1, #0
 8005e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000093 	.word	0x20000093
 8005e50:	20000094 	.word	0x20000094
 8005e54:	20000095 	.word	0x20000095

08005e58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	32b0      	adds	r2, #176	@ 0xb0
 8005e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e0bf      	b.n	8006008 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d050      	beq.n	8005f36 <USBD_CDC_Setup+0xde>
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	f040 80af 	bne.w	8005ff8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	88db      	ldrh	r3, [r3, #6]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d03a      	beq.n	8005f18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	b25b      	sxtb	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	da1b      	bge.n	8005ee4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	33b0      	adds	r3, #176	@ 0xb0
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005ec2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	88d2      	ldrh	r2, [r2, #6]
 8005ec8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	88db      	ldrh	r3, [r3, #6]
 8005ece:	2b07      	cmp	r3, #7
 8005ed0:	bf28      	it	cs
 8005ed2:	2307      	movcs	r3, #7
 8005ed4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	89fa      	ldrh	r2, [r7, #14]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 fd87 	bl	80079f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005ee2:	e090      	b.n	8006006 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	785a      	ldrb	r2, [r3, #1]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	88db      	ldrh	r3, [r3, #6]
 8005ef2:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ef4:	d803      	bhi.n	8005efe <USBD_CDC_Setup+0xa6>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	88db      	ldrh	r3, [r3, #6]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	e000      	b.n	8005f00 <USBD_CDC_Setup+0xa8>
 8005efe:	2240      	movs	r2, #64	@ 0x40
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005f06:	6939      	ldr	r1, [r7, #16]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005f0e:	461a      	mov	r2, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 fd99 	bl	8007a48 <USBD_CtlPrepareRx>
      break;
 8005f16:	e076      	b.n	8006006 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	33b0      	adds	r3, #176	@ 0xb0
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	7850      	ldrb	r0, [r2, #1]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	4798      	blx	r3
      break;
 8005f34:	e067      	b.n	8006006 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	2b0b      	cmp	r3, #11
 8005f3c:	d851      	bhi.n	8005fe2 <USBD_CDC_Setup+0x18a>
 8005f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <USBD_CDC_Setup+0xec>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f75 	.word	0x08005f75
 8005f48:	08005ff1 	.word	0x08005ff1
 8005f4c:	08005fe3 	.word	0x08005fe3
 8005f50:	08005fe3 	.word	0x08005fe3
 8005f54:	08005fe3 	.word	0x08005fe3
 8005f58:	08005fe3 	.word	0x08005fe3
 8005f5c:	08005fe3 	.word	0x08005fe3
 8005f60:	08005fe3 	.word	0x08005fe3
 8005f64:	08005fe3 	.word	0x08005fe3
 8005f68:	08005fe3 	.word	0x08005fe3
 8005f6c:	08005f9f 	.word	0x08005f9f
 8005f70:	08005fc9 	.word	0x08005fc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d107      	bne.n	8005f90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f80:	f107 030a 	add.w	r3, r7, #10
 8005f84:	2202      	movs	r2, #2
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 fd31 	bl	80079f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f8e:	e032      	b.n	8005ff6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fcbb 	bl	800790e <USBD_CtlError>
            ret = USBD_FAIL;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f9c:	e02b      	b.n	8005ff6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d107      	bne.n	8005fba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005faa:	f107 030d 	add.w	r3, r7, #13
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 fd1c 	bl	80079f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fb8:	e01d      	b.n	8005ff6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fca6 	bl	800790e <USBD_CtlError>
            ret = USBD_FAIL;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fc6:	e016      	b.n	8005ff6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d00f      	beq.n	8005ff4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 fc99 	bl	800790e <USBD_CtlError>
            ret = USBD_FAIL;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005fe0:	e008      	b.n	8005ff4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 fc92 	bl	800790e <USBD_CtlError>
          ret = USBD_FAIL;
 8005fea:	2303      	movs	r3, #3
 8005fec:	75fb      	strb	r3, [r7, #23]
          break;
 8005fee:	e002      	b.n	8005ff6 <USBD_CDC_Setup+0x19e>
          break;
 8005ff0:	bf00      	nop
 8005ff2:	e008      	b.n	8006006 <USBD_CDC_Setup+0x1ae>
          break;
 8005ff4:	bf00      	nop
      }
      break;
 8005ff6:	e006      	b.n	8006006 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fc87 	bl	800790e <USBD_CtlError>
      ret = USBD_FAIL;
 8006000:	2303      	movs	r3, #3
 8006002:	75fb      	strb	r3, [r7, #23]
      break;
 8006004:	bf00      	nop
  }

  return (uint8_t)ret;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006022:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	32b0      	adds	r2, #176	@ 0xb0
 800602e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006036:	2303      	movs	r3, #3
 8006038:	e065      	b.n	8006106 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	32b0      	adds	r2, #176	@ 0xb0
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006048:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	f003 020f 	and.w	r2, r3, #15
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	3318      	adds	r3, #24
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d02f      	beq.n	80060c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	f003 020f 	and.w	r2, r3, #15
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4613      	mov	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	3318      	adds	r3, #24
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	f003 010f 	and.w	r1, r3, #15
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	460b      	mov	r3, r1
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	440b      	add	r3, r1
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4403      	add	r3, r0
 800608c:	331c      	adds	r3, #28
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	fbb2 f1f3 	udiv	r1, r2, r3
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800609a:	2b00      	cmp	r3, #0
 800609c:	d112      	bne.n	80060c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	f003 020f 	and.w	r2, r3, #15
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	3318      	adds	r3, #24
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060b6:	78f9      	ldrb	r1, [r7, #3]
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f002 f97e 	bl	80083be <USBD_LL_Transmit>
 80060c2:	e01f      	b.n	8006104 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	33b0      	adds	r3, #176	@ 0xb0
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d010      	beq.n	8006104 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	33b0      	adds	r3, #176	@ 0xb0
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	32b0      	adds	r2, #176	@ 0xb0
 8006124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006128:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	32b0      	adds	r2, #176	@ 0xb0
 8006134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800613c:	2303      	movs	r3, #3
 800613e:	e01a      	b.n	8006176 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f002 f97c 	bl	8008442 <USBD_LL_GetRxDataSize>
 800614a:	4602      	mov	r2, r0
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	33b0      	adds	r3, #176	@ 0xb0
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006170:	4611      	mov	r1, r2
 8006172:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	32b0      	adds	r2, #176	@ 0xb0
 8006190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006194:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	e024      	b.n	80061ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	33b0      	adds	r3, #176	@ 0xb0
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d019      	beq.n	80061e8 <USBD_CDC_EP0_RxReady+0x6a>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80061ba:	2bff      	cmp	r3, #255	@ 0xff
 80061bc:	d014      	beq.n	80061e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	33b0      	adds	r3, #176	@ 0xb0
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80061d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80061de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	22ff      	movs	r2, #255	@ 0xff
 80061e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80061fc:	2182      	movs	r1, #130	@ 0x82
 80061fe:	4818      	ldr	r0, [pc, #96]	@ (8006260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006200:	f000 fd4f 	bl	8006ca2 <USBD_GetEpDesc>
 8006204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006206:	2101      	movs	r1, #1
 8006208:	4815      	ldr	r0, [pc, #84]	@ (8006260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800620a:	f000 fd4a 	bl	8006ca2 <USBD_GetEpDesc>
 800620e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006210:	2181      	movs	r1, #129	@ 0x81
 8006212:	4813      	ldr	r0, [pc, #76]	@ (8006260 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006214:	f000 fd45 	bl	8006ca2 <USBD_GetEpDesc>
 8006218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2210      	movs	r2, #16
 8006224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d006      	beq.n	800623a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2200      	movs	r2, #0
 8006230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006234:	711a      	strb	r2, [r3, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006248:	711a      	strb	r2, [r3, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2243      	movs	r2, #67	@ 0x43
 8006252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006254:	4b02      	ldr	r3, [pc, #8]	@ (8006260 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000050 	.word	0x20000050

08006264 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800626c:	2182      	movs	r1, #130	@ 0x82
 800626e:	4818      	ldr	r0, [pc, #96]	@ (80062d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006270:	f000 fd17 	bl	8006ca2 <USBD_GetEpDesc>
 8006274:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006276:	2101      	movs	r1, #1
 8006278:	4815      	ldr	r0, [pc, #84]	@ (80062d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800627a:	f000 fd12 	bl	8006ca2 <USBD_GetEpDesc>
 800627e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006280:	2181      	movs	r1, #129	@ 0x81
 8006282:	4813      	ldr	r0, [pc, #76]	@ (80062d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006284:	f000 fd0d 	bl	8006ca2 <USBD_GetEpDesc>
 8006288:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2210      	movs	r2, #16
 8006294:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d006      	beq.n	80062aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2200      	movs	r2, #0
 80062a0:	711a      	strb	r2, [r3, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f042 0202 	orr.w	r2, r2, #2
 80062a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d006      	beq.n	80062be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	711a      	strb	r2, [r3, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f042 0202 	orr.w	r2, r2, #2
 80062bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2243      	movs	r2, #67	@ 0x43
 80062c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80062c4:	4b02      	ldr	r3, [pc, #8]	@ (80062d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000050 	.word	0x20000050

080062d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062dc:	2182      	movs	r1, #130	@ 0x82
 80062de:	4818      	ldr	r0, [pc, #96]	@ (8006340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062e0:	f000 fcdf 	bl	8006ca2 <USBD_GetEpDesc>
 80062e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062e6:	2101      	movs	r1, #1
 80062e8:	4815      	ldr	r0, [pc, #84]	@ (8006340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062ea:	f000 fcda 	bl	8006ca2 <USBD_GetEpDesc>
 80062ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062f0:	2181      	movs	r1, #129	@ 0x81
 80062f2:	4813      	ldr	r0, [pc, #76]	@ (8006340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062f4:	f000 fcd5 	bl	8006ca2 <USBD_GetEpDesc>
 80062f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2210      	movs	r2, #16
 8006304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2200      	movs	r2, #0
 8006310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006314:	711a      	strb	r2, [r3, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006328:	711a      	strb	r2, [r3, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2243      	movs	r2, #67	@ 0x43
 8006332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006334:	4b02      	ldr	r3, [pc, #8]	@ (8006340 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000050 	.word	0x20000050

08006344 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	220a      	movs	r2, #10
 8006350:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006352:	4b03      	ldr	r3, [pc, #12]	@ (8006360 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	2000000c 	.word	0x2000000c

08006364 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006374:	2303      	movs	r3, #3
 8006376:	e009      	b.n	800638c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	33b0      	adds	r3, #176	@ 0xb0
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	32b0      	adds	r2, #176	@ 0xb0
 80063ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e008      	b.n	80063d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	32b0      	adds	r2, #176	@ 0xb0
 80063f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e004      	b.n	800640a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
	...

08006418 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	32b0      	adds	r2, #176	@ 0xb0
 800642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800643a:	2303      	movs	r3, #3
 800643c:	e025      	b.n	800648a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11f      	bne.n	8006488 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2201      	movs	r2, #1
 800644c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006450:	4b10      	ldr	r3, [pc, #64]	@ (8006494 <USBD_CDC_TransmitPacket+0x7c>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f003 020f 	and.w	r2, r3, #15
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4403      	add	r3, r0
 800646a:	3318      	adds	r3, #24
 800646c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800646e:	4b09      	ldr	r3, [pc, #36]	@ (8006494 <USBD_CDC_TransmitPacket+0x7c>)
 8006470:	7819      	ldrb	r1, [r3, #0]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f001 ff9d 	bl	80083be <USBD_LL_Transmit>

    ret = USBD_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000093 	.word	0x20000093

08006498 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	32b0      	adds	r2, #176	@ 0xb0
 80064aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	32b0      	adds	r2, #176	@ 0xb0
 80064ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e018      	b.n	80064f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	7c1b      	ldrb	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <USBD_CDC_ReceivePacket+0x68>)
 80064d0:	7819      	ldrb	r1, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 ff8f 	bl	8008400 <USBD_LL_PrepareReceive>
 80064e2:	e008      	b.n	80064f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064e4:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <USBD_CDC_ReceivePacket+0x68>)
 80064e6:	7819      	ldrb	r1, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064ee:	2340      	movs	r3, #64	@ 0x40
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 ff85 	bl	8008400 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000094 	.word	0x20000094

08006504 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006518:	2303      	movs	r3, #3
 800651a:	e01f      	b.n	800655c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	79fa      	ldrb	r2, [r7, #7]
 800654e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f001 fdff 	bl	8008154 <USBD_LL_Init>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]

  return ret;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006578:	2303      	movs	r3, #3
 800657a:	e025      	b.n	80065c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	32ae      	adds	r2, #174	@ 0xae
 800658e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00f      	beq.n	80065b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	32ae      	adds	r2, #174	@ 0xae
 80065a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a8:	f107 020e 	add.w	r2, r7, #14
 80065ac:	4610      	mov	r0, r2
 80065ae:	4798      	blx	r3
 80065b0:	4602      	mov	r2, r0
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fe07 	bl	80081ec <USBD_LL_Start>
 80065de:	4603      	mov	r3, r0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d009      	beq.n	800662c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	78fa      	ldrb	r2, [r7, #3]
 8006622:	4611      	mov	r1, r2
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
 8006628:	4603      	mov	r3, r0
 800662a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	78fa      	ldrb	r2, [r7, #3]
 8006650:	4611      	mov	r1, r2
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800665c:	2303      	movs	r3, #3
 800665e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f001 f90c 	bl	800789a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006690:	461a      	mov	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d01a      	beq.n	80066dc <USBD_LL_SetupStage+0x72>
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d822      	bhi.n	80066f0 <USBD_LL_SetupStage+0x86>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <USBD_LL_SetupStage+0x4a>
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d00a      	beq.n	80066c8 <USBD_LL_SetupStage+0x5e>
 80066b2:	e01d      	b.n	80066f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fb63 	bl	8006d88 <USBD_StdDevReq>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
      break;
 80066c6:	e020      	b.n	800670a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fbcb 	bl	8006e6c <USBD_StdItfReq>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73fb      	strb	r3, [r7, #15]
      break;
 80066da:	e016      	b.n	800670a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc2d 	bl	8006f44 <USBD_StdEPReq>
 80066ea:	4603      	mov	r3, r0
 80066ec:	73fb      	strb	r3, [r7, #15]
      break;
 80066ee:	e00c      	b.n	800670a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80066f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fdd4 	bl	80082ac <USBD_LL_StallEP>
 8006704:	4603      	mov	r3, r0
 8006706:	73fb      	strb	r3, [r7, #15]
      break;
 8006708:	bf00      	nop
  }

  return ret;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	460b      	mov	r3, r1
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d16e      	bne.n	800680a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800673a:	2b03      	cmp	r3, #3
 800673c:	f040 8098 	bne.w	8006870 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	429a      	cmp	r2, r3
 800674a:	d913      	bls.n	8006774 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	1ad2      	subs	r2, r2, r3
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	4293      	cmp	r3, r2
 8006764:	bf28      	it	cs
 8006766:	4613      	movcs	r3, r2
 8006768:	461a      	mov	r2, r3
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f001 f988 	bl	8007a82 <USBD_CtlContinueRx>
 8006772:	e07d      	b.n	8006870 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	2b02      	cmp	r3, #2
 8006780:	d014      	beq.n	80067ac <USBD_LL_DataOutStage+0x98>
 8006782:	2b02      	cmp	r3, #2
 8006784:	d81d      	bhi.n	80067c2 <USBD_LL_DataOutStage+0xae>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <USBD_LL_DataOutStage+0x7c>
 800678a:	2b01      	cmp	r3, #1
 800678c:	d003      	beq.n	8006796 <USBD_LL_DataOutStage+0x82>
 800678e:	e018      	b.n	80067c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	75bb      	strb	r3, [r7, #22]
            break;
 8006794:	e018      	b.n	80067c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800679c:	b2db      	uxtb	r3, r3
 800679e:	4619      	mov	r1, r3
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fa64 	bl	8006c6e <USBD_CoreFindIF>
 80067a6:	4603      	mov	r3, r0
 80067a8:	75bb      	strb	r3, [r7, #22]
            break;
 80067aa:	e00d      	b.n	80067c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	4619      	mov	r1, r3
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fa66 	bl	8006c88 <USBD_CoreFindEP>
 80067bc:	4603      	mov	r3, r0
 80067be:	75bb      	strb	r3, [r7, #22]
            break;
 80067c0:	e002      	b.n	80067c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	75bb      	strb	r3, [r7, #22]
            break;
 80067c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80067c8:	7dbb      	ldrb	r3, [r7, #22]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d119      	bne.n	8006802 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d113      	bne.n	8006802 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80067da:	7dba      	ldrb	r2, [r7, #22]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	32ae      	adds	r2, #174	@ 0xae
 80067e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80067ea:	7dba      	ldrb	r2, [r7, #22]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80067f2:	7dba      	ldrb	r2, [r7, #22]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	32ae      	adds	r2, #174	@ 0xae
 80067f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f001 f94e 	bl	8007aa4 <USBD_CtlSendStatus>
 8006808:	e032      	b.n	8006870 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006810:	b2db      	uxtb	r3, r3
 8006812:	4619      	mov	r1, r3
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fa37 	bl	8006c88 <USBD_CoreFindEP>
 800681a:	4603      	mov	r3, r0
 800681c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800681e:	7dbb      	ldrb	r3, [r7, #22]
 8006820:	2bff      	cmp	r3, #255	@ 0xff
 8006822:	d025      	beq.n	8006870 <USBD_LL_DataOutStage+0x15c>
 8006824:	7dbb      	ldrb	r3, [r7, #22]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d122      	bne.n	8006870 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b03      	cmp	r3, #3
 8006834:	d117      	bne.n	8006866 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006836:	7dba      	ldrb	r2, [r7, #22]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	32ae      	adds	r2, #174	@ 0xae
 800683c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00f      	beq.n	8006866 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006846:	7dba      	ldrb	r2, [r7, #22]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800684e:	7dba      	ldrb	r2, [r7, #22]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	32ae      	adds	r2, #174	@ 0xae
 8006854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	7afa      	ldrb	r2, [r7, #11]
 800685c:	4611      	mov	r1, r2
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	4798      	blx	r3
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	e000      	b.n	8006872 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	460b      	mov	r3, r1
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d16f      	bne.n	800696e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3314      	adds	r3, #20
 8006892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800689a:	2b02      	cmp	r3, #2
 800689c:	d15a      	bne.n	8006954 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d914      	bls.n	80068d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	1ad2      	subs	r2, r2, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	461a      	mov	r2, r3
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f001 f8b0 	bl	8007a26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068c6:	2300      	movs	r3, #0
 80068c8:	2200      	movs	r2, #0
 80068ca:	2100      	movs	r1, #0
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f001 fd97 	bl	8008400 <USBD_LL_PrepareReceive>
 80068d2:	e03f      	b.n	8006954 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d11c      	bne.n	800691a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d316      	bcc.n	800691a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d20f      	bcs.n	800691a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2100      	movs	r1, #0
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f001 f891 	bl	8007a26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800690c:	2300      	movs	r3, #0
 800690e:	2200      	movs	r2, #0
 8006910:	2100      	movs	r1, #0
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f001 fd74 	bl	8008400 <USBD_LL_PrepareReceive>
 8006918:	e01c      	b.n	8006954 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b03      	cmp	r3, #3
 8006924:	d10f      	bne.n	8006946 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006946:	2180      	movs	r1, #128	@ 0x80
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f001 fcaf 	bl	80082ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f001 f8bb 	bl	8007aca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d03a      	beq.n	80069d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff fe42 	bl	80065e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800696c:	e032      	b.n	80069d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800696e:	7afb      	ldrb	r3, [r7, #11]
 8006970:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006974:	b2db      	uxtb	r3, r3
 8006976:	4619      	mov	r1, r3
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 f985 	bl	8006c88 <USBD_CoreFindEP>
 800697e:	4603      	mov	r3, r0
 8006980:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	2bff      	cmp	r3, #255	@ 0xff
 8006986:	d025      	beq.n	80069d4 <USBD_LL_DataInStage+0x15a>
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d122      	bne.n	80069d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b03      	cmp	r3, #3
 8006998:	d11c      	bne.n	80069d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800699a:	7dfa      	ldrb	r2, [r7, #23]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	32ae      	adds	r2, #174	@ 0xae
 80069a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d014      	beq.n	80069d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80069aa:	7dfa      	ldrb	r2, [r7, #23]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80069b2:	7dfa      	ldrb	r2, [r7, #23]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	32ae      	adds	r2, #174	@ 0xae
 80069b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	7afa      	ldrb	r2, [r7, #11]
 80069c0:	4611      	mov	r1, r2
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	4798      	blx	r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80069ca:	7dbb      	ldrb	r3, [r7, #22]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80069d0:	7dbb      	ldrb	r3, [r7, #22]
 80069d2:	e000      	b.n	80069d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d014      	beq.n	8006a44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00e      	beq.n	8006a44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6852      	ldr	r2, [r2, #4]
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	4611      	mov	r1, r2
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	4798      	blx	r3
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006a40:	2303      	movs	r3, #3
 8006a42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a44:	2340      	movs	r3, #64	@ 0x40
 8006a46:	2200      	movs	r2, #0
 8006a48:	2100      	movs	r1, #0
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 fbe9 	bl	8008222 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2240      	movs	r2, #64	@ 0x40
 8006a5c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a60:	2340      	movs	r3, #64	@ 0x40
 8006a62:	2200      	movs	r2, #0
 8006a64:	2180      	movs	r1, #128	@ 0x80
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fbdb 	bl	8008222 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2240      	movs	r2, #64	@ 0x40
 8006a76:	621a      	str	r2, [r3, #32]

  return ret;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	78fa      	ldrb	r2, [r7, #3]
 8006a92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d006      	beq.n	8006ac4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d106      	bne.n	8006afc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d110      	bne.n	8006b40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	32ae      	adds	r2, #174	@ 0xae
 8006b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e01c      	b.n	8006ba6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d115      	bne.n	8006ba4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	32ae      	adds	r2, #174	@ 0xae
 8006b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	32ae      	adds	r2, #174	@ 0xae
 8006b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	78fa      	ldrb	r2, [r7, #3]
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	32ae      	adds	r2, #174	@ 0xae
 8006bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e01c      	b.n	8006c0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d115      	bne.n	8006c08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	32ae      	adds	r2, #174	@ 0xae
 8006be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	32ae      	adds	r2, #174	@ 0xae
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c00:	78fa      	ldrb	r2, [r7, #3]
 8006c02:	4611      	mov	r1, r2
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00e      	beq.n	8006c64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6852      	ldr	r2, [r2, #4]
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	4611      	mov	r1, r2
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	460b      	mov	r3, r1
 8006c78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	885b      	ldrh	r3, [r3, #2]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	7812      	ldrb	r2, [r2, #0]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d91f      	bls.n	8006d08 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006cce:	e013      	b.n	8006cf8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006cd0:	f107 030a 	add.w	r3, r7, #10
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6978      	ldr	r0, [r7, #20]
 8006cd8:	f000 f81b 	bl	8006d12 <USBD_GetNextDesc>
 8006cdc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	785b      	ldrb	r3, [r3, #1]
 8006ce2:	2b05      	cmp	r3, #5
 8006ce4:	d108      	bne.n	8006cf8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	789b      	ldrb	r3, [r3, #2]
 8006cee:	78fa      	ldrb	r2, [r7, #3]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d008      	beq.n	8006d06 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	885b      	ldrh	r3, [r3, #2]
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	897b      	ldrh	r3, [r7, #10]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d8e5      	bhi.n	8006cd0 <USBD_GetEpDesc+0x2e>
 8006d04:	e000      	b.n	8006d08 <USBD_GetEpDesc+0x66>
          break;
 8006d06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d08:	693b      	ldr	r3, [r7, #16]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	7812      	ldrb	r2, [r2, #0]
 8006d28:	4413      	add	r3, r2
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b087      	sub	sp, #28
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d68:	8a3b      	ldrh	r3, [r7, #16]
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	b21a      	sxth	r2, r3
 8006d6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	b21b      	sxth	r3, r3
 8006d76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d78:	89fb      	ldrh	r3, [r7, #14]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
	...

08006d88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d9e:	2b40      	cmp	r3, #64	@ 0x40
 8006da0:	d005      	beq.n	8006dae <USBD_StdDevReq+0x26>
 8006da2:	2b40      	cmp	r3, #64	@ 0x40
 8006da4:	d857      	bhi.n	8006e56 <USBD_StdDevReq+0xce>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00f      	beq.n	8006dca <USBD_StdDevReq+0x42>
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d153      	bne.n	8006e56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	32ae      	adds	r2, #174	@ 0xae
 8006db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc8:	e04a      	b.n	8006e60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b09      	cmp	r3, #9
 8006dd0:	d83b      	bhi.n	8006e4a <USBD_StdDevReq+0xc2>
 8006dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd8 <USBD_StdDevReq+0x50>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006e41 	.word	0x08006e41
 8006de0:	08006e4b 	.word	0x08006e4b
 8006de4:	08006e37 	.word	0x08006e37
 8006de8:	08006e4b 	.word	0x08006e4b
 8006dec:	08006e0b 	.word	0x08006e0b
 8006df0:	08006e01 	.word	0x08006e01
 8006df4:	08006e4b 	.word	0x08006e4b
 8006df8:	08006e23 	.word	0x08006e23
 8006dfc:	08006e15 	.word	0x08006e15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa3c 	bl	8007280 <USBD_GetDescriptor>
          break;
 8006e08:	e024      	b.n	8006e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fba1 	bl	8007554 <USBD_SetAddress>
          break;
 8006e12:	e01f      	b.n	8006e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fbe0 	bl	80075dc <USBD_SetConfig>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	73fb      	strb	r3, [r7, #15]
          break;
 8006e20:	e018      	b.n	8006e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fc83 	bl	8007730 <USBD_GetConfig>
          break;
 8006e2a:	e013      	b.n	8006e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fcb4 	bl	800779c <USBD_GetStatus>
          break;
 8006e34:	e00e      	b.n	8006e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fce3 	bl	8007804 <USBD_SetFeature>
          break;
 8006e3e:	e009      	b.n	8006e54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fd07 	bl	8007856 <USBD_ClrFeature>
          break;
 8006e48:	e004      	b.n	8006e54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fd5e 	bl	800790e <USBD_CtlError>
          break;
 8006e52:	bf00      	nop
      }
      break;
 8006e54:	e004      	b.n	8006e60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fd58 	bl	800790e <USBD_CtlError>
      break;
 8006e5e:	bf00      	nop
  }

  return ret;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop

08006e6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e82:	2b40      	cmp	r3, #64	@ 0x40
 8006e84:	d005      	beq.n	8006e92 <USBD_StdItfReq+0x26>
 8006e86:	2b40      	cmp	r3, #64	@ 0x40
 8006e88:	d852      	bhi.n	8006f30 <USBD_StdItfReq+0xc4>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <USBD_StdItfReq+0x26>
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	d14e      	bne.n	8006f30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d840      	bhi.n	8006f22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	889b      	ldrh	r3, [r3, #4]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d836      	bhi.n	8006f18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	889b      	ldrh	r3, [r3, #4]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff fedb 	bl	8006c6e <USBD_CoreFindIF>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2bff      	cmp	r3, #255	@ 0xff
 8006ec0:	d01d      	beq.n	8006efe <USBD_StdItfReq+0x92>
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d11a      	bne.n	8006efe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006ec8:	7bba      	ldrb	r2, [r7, #14]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	32ae      	adds	r2, #174	@ 0xae
 8006ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00f      	beq.n	8006ef8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006ed8:	7bba      	ldrb	r2, [r7, #14]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ee0:	7bba      	ldrb	r2, [r7, #14]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	32ae      	adds	r2, #174	@ 0xae
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006ef6:	e004      	b.n	8006f02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006efc:	e001      	b.n	8006f02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006efe:	2303      	movs	r3, #3
 8006f00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	88db      	ldrh	r3, [r3, #6]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d110      	bne.n	8006f2c <USBD_StdItfReq+0xc0>
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10d      	bne.n	8006f2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fdc7 	bl	8007aa4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f16:	e009      	b.n	8006f2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fcf7 	bl	800790e <USBD_CtlError>
          break;
 8006f20:	e004      	b.n	8006f2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fcf2 	bl	800790e <USBD_CtlError>
          break;
 8006f2a:	e000      	b.n	8006f2e <USBD_StdItfReq+0xc2>
          break;
 8006f2c:	bf00      	nop
      }
      break;
 8006f2e:	e004      	b.n	8006f3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fceb 	bl	800790e <USBD_CtlError>
      break;
 8006f38:	bf00      	nop
  }

  return ret;
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	889b      	ldrh	r3, [r3, #4]
 8006f56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f60:	2b40      	cmp	r3, #64	@ 0x40
 8006f62:	d007      	beq.n	8006f74 <USBD_StdEPReq+0x30>
 8006f64:	2b40      	cmp	r3, #64	@ 0x40
 8006f66:	f200 817f 	bhi.w	8007268 <USBD_StdEPReq+0x324>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d02a      	beq.n	8006fc4 <USBD_StdEPReq+0x80>
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	f040 817a 	bne.w	8007268 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff fe85 	bl	8006c88 <USBD_CoreFindEP>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f82:	7b7b      	ldrb	r3, [r7, #13]
 8006f84:	2bff      	cmp	r3, #255	@ 0xff
 8006f86:	f000 8174 	beq.w	8007272 <USBD_StdEPReq+0x32e>
 8006f8a:	7b7b      	ldrb	r3, [r7, #13]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f040 8170 	bne.w	8007272 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006f92:	7b7a      	ldrb	r2, [r7, #13]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006f9a:	7b7a      	ldrb	r2, [r7, #13]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	32ae      	adds	r2, #174	@ 0xae
 8006fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8163 	beq.w	8007272 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006fac:	7b7a      	ldrb	r2, [r7, #13]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	32ae      	adds	r2, #174	@ 0xae
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	4798      	blx	r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fc2:	e156      	b.n	8007272 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	785b      	ldrb	r3, [r3, #1]
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d008      	beq.n	8006fde <USBD_StdEPReq+0x9a>
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	f300 8145 	bgt.w	800725c <USBD_StdEPReq+0x318>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 809b 	beq.w	800710e <USBD_StdEPReq+0x1ca>
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d03c      	beq.n	8007056 <USBD_StdEPReq+0x112>
 8006fdc:	e13e      	b.n	800725c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d002      	beq.n	8006ff0 <USBD_StdEPReq+0xac>
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d016      	beq.n	800701c <USBD_StdEPReq+0xd8>
 8006fee:	e02c      	b.n	800704a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <USBD_StdEPReq+0xce>
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b80      	cmp	r3, #128	@ 0x80
 8006ffa:	d00a      	beq.n	8007012 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ffc:	7bbb      	ldrb	r3, [r7, #14]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 f953 	bl	80082ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007006:	2180      	movs	r1, #128	@ 0x80
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 f94f 	bl	80082ac <USBD_LL_StallEP>
 800700e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007010:	e020      	b.n	8007054 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fc7a 	bl	800790e <USBD_CtlError>
              break;
 800701a:	e01b      	b.n	8007054 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	885b      	ldrh	r3, [r3, #2]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10e      	bne.n	8007042 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <USBD_StdEPReq+0xfe>
 800702a:	7bbb      	ldrb	r3, [r7, #14]
 800702c:	2b80      	cmp	r3, #128	@ 0x80
 800702e:	d008      	beq.n	8007042 <USBD_StdEPReq+0xfe>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	88db      	ldrh	r3, [r3, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d104      	bne.n	8007042 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f935 	bl	80082ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fd2e 	bl	8007aa4 <USBD_CtlSendStatus>

              break;
 8007048:	e004      	b.n	8007054 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fc5e 	bl	800790e <USBD_CtlError>
              break;
 8007052:	bf00      	nop
          }
          break;
 8007054:	e107      	b.n	8007266 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d002      	beq.n	8007068 <USBD_StdEPReq+0x124>
 8007062:	2b03      	cmp	r3, #3
 8007064:	d016      	beq.n	8007094 <USBD_StdEPReq+0x150>
 8007066:	e04b      	b.n	8007100 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00d      	beq.n	800708a <USBD_StdEPReq+0x146>
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b80      	cmp	r3, #128	@ 0x80
 8007072:	d00a      	beq.n	800708a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f917 	bl	80082ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800707e:	2180      	movs	r1, #128	@ 0x80
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f913 	bl	80082ac <USBD_LL_StallEP>
 8007086:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007088:	e040      	b.n	800710c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fc3e 	bl	800790e <USBD_CtlError>
              break;
 8007092:	e03b      	b.n	800710c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	885b      	ldrh	r3, [r3, #2]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d136      	bne.n	800710a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f91d 	bl	80082ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fcf7 	bl	8007aa4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff fde4 	bl	8006c88 <USBD_CoreFindEP>
 80070c0:	4603      	mov	r3, r0
 80070c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070c4:	7b7b      	ldrb	r3, [r7, #13]
 80070c6:	2bff      	cmp	r3, #255	@ 0xff
 80070c8:	d01f      	beq.n	800710a <USBD_StdEPReq+0x1c6>
 80070ca:	7b7b      	ldrb	r3, [r7, #13]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d11c      	bne.n	800710a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80070d0:	7b7a      	ldrb	r2, [r7, #13]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80070d8:	7b7a      	ldrb	r2, [r7, #13]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	32ae      	adds	r2, #174	@ 0xae
 80070de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d010      	beq.n	800710a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070e8:	7b7a      	ldrb	r2, [r7, #13]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	32ae      	adds	r2, #174	@ 0xae
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80070fe:	e004      	b.n	800710a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fc03 	bl	800790e <USBD_CtlError>
              break;
 8007108:	e000      	b.n	800710c <USBD_StdEPReq+0x1c8>
              break;
 800710a:	bf00      	nop
          }
          break;
 800710c:	e0ab      	b.n	8007266 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d002      	beq.n	8007120 <USBD_StdEPReq+0x1dc>
 800711a:	2b03      	cmp	r3, #3
 800711c:	d032      	beq.n	8007184 <USBD_StdEPReq+0x240>
 800711e:	e097      	b.n	8007250 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <USBD_StdEPReq+0x1f2>
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b80      	cmp	r3, #128	@ 0x80
 800712a:	d004      	beq.n	8007136 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fbed 	bl	800790e <USBD_CtlError>
                break;
 8007134:	e091      	b.n	800725a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007136:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800713a:	2b00      	cmp	r3, #0
 800713c:	da0b      	bge.n	8007156 <USBD_StdEPReq+0x212>
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	3310      	adds	r3, #16
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	3304      	adds	r3, #4
 8007154:	e00b      	b.n	800716e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4413      	add	r3, r2
 800716c:	3304      	adds	r3, #4
 800716e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2202      	movs	r2, #2
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fc37 	bl	80079f0 <USBD_CtlSendData>
              break;
 8007182:	e06a      	b.n	800725a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007188:	2b00      	cmp	r3, #0
 800718a:	da11      	bge.n	80071b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	f003 020f 	and.w	r2, r3, #15
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	3324      	adds	r3, #36	@ 0x24
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d117      	bne.n	80071d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fbb0 	bl	800790e <USBD_CtlError>
                  break;
 80071ae:	e054      	b.n	800725a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	f003 020f 	and.w	r2, r3, #15
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	4613      	mov	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	440b      	add	r3, r1
 80071c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fb9d 	bl	800790e <USBD_CtlError>
                  break;
 80071d4:	e041      	b.n	800725a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	da0b      	bge.n	80071f6 <USBD_StdEPReq+0x2b2>
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	3310      	adds	r3, #16
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	4413      	add	r3, r2
 80071f2:	3304      	adds	r3, #4
 80071f4:	e00b      	b.n	800720e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	4413      	add	r3, r2
 800720c:	3304      	adds	r3, #4
 800720e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <USBD_StdEPReq+0x2d8>
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b80      	cmp	r3, #128	@ 0x80
 800721a:	d103      	bne.n	8007224 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e00e      	b.n	8007242 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 f87d 	bl	8008328 <USBD_LL_IsStallEP>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2201      	movs	r2, #1
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e002      	b.n	8007242 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2202      	movs	r2, #2
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fbd1 	bl	80079f0 <USBD_CtlSendData>
              break;
 800724e:	e004      	b.n	800725a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fb5b 	bl	800790e <USBD_CtlError>
              break;
 8007258:	bf00      	nop
          }
          break;
 800725a:	e004      	b.n	8007266 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fb55 	bl	800790e <USBD_CtlError>
          break;
 8007264:	bf00      	nop
      }
      break;
 8007266:	e005      	b.n	8007274 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fb4f 	bl	800790e <USBD_CtlError>
      break;
 8007270:	e000      	b.n	8007274 <USBD_StdEPReq+0x330>
      break;
 8007272:	bf00      	nop
  }

  return ret;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	885b      	ldrh	r3, [r3, #2]
 800729a:	0a1b      	lsrs	r3, r3, #8
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	2b06      	cmp	r3, #6
 80072a2:	f200 8128 	bhi.w	80074f6 <USBD_GetDescriptor+0x276>
 80072a6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ac <USBD_GetDescriptor+0x2c>)
 80072a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	080072e1 	.word	0x080072e1
 80072b4:	08007321 	.word	0x08007321
 80072b8:	080074f7 	.word	0x080074f7
 80072bc:	080074f7 	.word	0x080074f7
 80072c0:	08007497 	.word	0x08007497
 80072c4:	080074c3 	.word	0x080074c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	7c12      	ldrb	r2, [r2, #16]
 80072d4:	f107 0108 	add.w	r1, r7, #8
 80072d8:	4610      	mov	r0, r2
 80072da:	4798      	blx	r3
 80072dc:	60f8      	str	r0, [r7, #12]
      break;
 80072de:	e112      	b.n	8007506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	7c1b      	ldrb	r3, [r3, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10d      	bne.n	8007304 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f0:	f107 0208 	add.w	r2, r7, #8
 80072f4:	4610      	mov	r0, r2
 80072f6:	4798      	blx	r3
 80072f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3301      	adds	r3, #1
 80072fe:	2202      	movs	r2, #2
 8007300:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007302:	e100      	b.n	8007506 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800730a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730c:	f107 0208 	add.w	r2, r7, #8
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	2202      	movs	r2, #2
 800731c:	701a      	strb	r2, [r3, #0]
      break;
 800731e:	e0f2      	b.n	8007506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	885b      	ldrh	r3, [r3, #2]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b05      	cmp	r3, #5
 8007328:	f200 80ac 	bhi.w	8007484 <USBD_GetDescriptor+0x204>
 800732c:	a201      	add	r2, pc, #4	@ (adr r2, 8007334 <USBD_GetDescriptor+0xb4>)
 800732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007332:	bf00      	nop
 8007334:	0800734d 	.word	0x0800734d
 8007338:	08007381 	.word	0x08007381
 800733c:	080073b5 	.word	0x080073b5
 8007340:	080073e9 	.word	0x080073e9
 8007344:	0800741d 	.word	0x0800741d
 8007348:	08007451 	.word	0x08007451
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00b      	beq.n	8007370 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	7c12      	ldrb	r2, [r2, #16]
 8007364:	f107 0108 	add.w	r1, r7, #8
 8007368:	4610      	mov	r0, r2
 800736a:	4798      	blx	r3
 800736c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800736e:	e091      	b.n	8007494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 facb 	bl	800790e <USBD_CtlError>
            err++;
 8007378:	7afb      	ldrb	r3, [r7, #11]
 800737a:	3301      	adds	r3, #1
 800737c:	72fb      	strb	r3, [r7, #11]
          break;
 800737e:	e089      	b.n	8007494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	7c12      	ldrb	r2, [r2, #16]
 8007398:	f107 0108 	add.w	r1, r7, #8
 800739c:	4610      	mov	r0, r2
 800739e:	4798      	blx	r3
 80073a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073a2:	e077      	b.n	8007494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fab1 	bl	800790e <USBD_CtlError>
            err++;
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	3301      	adds	r3, #1
 80073b0:	72fb      	strb	r3, [r7, #11]
          break;
 80073b2:	e06f      	b.n	8007494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	7c12      	ldrb	r2, [r2, #16]
 80073cc:	f107 0108 	add.w	r1, r7, #8
 80073d0:	4610      	mov	r0, r2
 80073d2:	4798      	blx	r3
 80073d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073d6:	e05d      	b.n	8007494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa97 	bl	800790e <USBD_CtlError>
            err++;
 80073e0:	7afb      	ldrb	r3, [r7, #11]
 80073e2:	3301      	adds	r3, #1
 80073e4:	72fb      	strb	r3, [r7, #11]
          break;
 80073e6:	e055      	b.n	8007494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	7c12      	ldrb	r2, [r2, #16]
 8007400:	f107 0108 	add.w	r1, r7, #8
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
 8007408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800740a:	e043      	b.n	8007494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa7d 	bl	800790e <USBD_CtlError>
            err++;
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	3301      	adds	r3, #1
 8007418:	72fb      	strb	r3, [r7, #11]
          break;
 800741a:	e03b      	b.n	8007494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	7c12      	ldrb	r2, [r2, #16]
 8007434:	f107 0108 	add.w	r1, r7, #8
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
 800743c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800743e:	e029      	b.n	8007494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa63 	bl	800790e <USBD_CtlError>
            err++;
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	3301      	adds	r3, #1
 800744c:	72fb      	strb	r3, [r7, #11]
          break;
 800744e:	e021      	b.n	8007494 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	7c12      	ldrb	r2, [r2, #16]
 8007468:	f107 0108 	add.w	r1, r7, #8
 800746c:	4610      	mov	r0, r2
 800746e:	4798      	blx	r3
 8007470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007472:	e00f      	b.n	8007494 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa49 	bl	800790e <USBD_CtlError>
            err++;
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	3301      	adds	r3, #1
 8007480:	72fb      	strb	r3, [r7, #11]
          break;
 8007482:	e007      	b.n	8007494 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa41 	bl	800790e <USBD_CtlError>
          err++;
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	3301      	adds	r3, #1
 8007490:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007492:	bf00      	nop
      }
      break;
 8007494:	e037      	b.n	8007506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	7c1b      	ldrb	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d109      	bne.n	80074b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a6:	f107 0208 	add.w	r2, r7, #8
 80074aa:	4610      	mov	r0, r2
 80074ac:	4798      	blx	r3
 80074ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074b0:	e029      	b.n	8007506 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fa2a 	bl	800790e <USBD_CtlError>
        err++;
 80074ba:	7afb      	ldrb	r3, [r7, #11]
 80074bc:	3301      	adds	r3, #1
 80074be:	72fb      	strb	r3, [r7, #11]
      break;
 80074c0:	e021      	b.n	8007506 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	7c1b      	ldrb	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10d      	bne.n	80074e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d2:	f107 0208 	add.w	r2, r7, #8
 80074d6:	4610      	mov	r0, r2
 80074d8:	4798      	blx	r3
 80074da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3301      	adds	r3, #1
 80074e0:	2207      	movs	r2, #7
 80074e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074e4:	e00f      	b.n	8007506 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fa10 	bl	800790e <USBD_CtlError>
        err++;
 80074ee:	7afb      	ldrb	r3, [r7, #11]
 80074f0:	3301      	adds	r3, #1
 80074f2:	72fb      	strb	r3, [r7, #11]
      break;
 80074f4:	e007      	b.n	8007506 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fa08 	bl	800790e <USBD_CtlError>
      err++;
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	3301      	adds	r3, #1
 8007502:	72fb      	strb	r3, [r7, #11]
      break;
 8007504:	bf00      	nop
  }

  if (err != 0U)
 8007506:	7afb      	ldrb	r3, [r7, #11]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d11e      	bne.n	800754a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	88db      	ldrh	r3, [r3, #6]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d016      	beq.n	8007542 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007514:	893b      	ldrh	r3, [r7, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00e      	beq.n	8007538 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	88da      	ldrh	r2, [r3, #6]
 800751e:	893b      	ldrh	r3, [r7, #8]
 8007520:	4293      	cmp	r3, r2
 8007522:	bf28      	it	cs
 8007524:	4613      	movcs	r3, r2
 8007526:	b29b      	uxth	r3, r3
 8007528:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800752a:	893b      	ldrh	r3, [r7, #8]
 800752c:	461a      	mov	r2, r3
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fa5d 	bl	80079f0 <USBD_CtlSendData>
 8007536:	e009      	b.n	800754c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f9e7 	bl	800790e <USBD_CtlError>
 8007540:	e004      	b.n	800754c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 faae 	bl	8007aa4 <USBD_CtlSendStatus>
 8007548:	e000      	b.n	800754c <USBD_GetDescriptor+0x2cc>
    return;
 800754a:	bf00      	nop
  }
}
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop

08007554 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	889b      	ldrh	r3, [r3, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d131      	bne.n	80075ca <USBD_SetAddress+0x76>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	88db      	ldrh	r3, [r3, #6]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d12d      	bne.n	80075ca <USBD_SetAddress+0x76>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	885b      	ldrh	r3, [r3, #2]
 8007572:	2b7f      	cmp	r3, #127	@ 0x7f
 8007574:	d829      	bhi.n	80075ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	885b      	ldrh	r3, [r3, #2]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007580:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b03      	cmp	r3, #3
 800758c:	d104      	bne.n	8007598 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f9bc 	bl	800790e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007596:	e01d      	b.n	80075d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	7bfa      	ldrb	r2, [r7, #15]
 800759c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 feeb 	bl	8008380 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa7a 	bl	8007aa4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2202      	movs	r2, #2
 80075ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075be:	e009      	b.n	80075d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c8:	e004      	b.n	80075d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f99e 	bl	800790e <USBD_CtlError>
  }
}
 80075d2:	bf00      	nop
 80075d4:	bf00      	nop
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	885b      	ldrh	r3, [r3, #2]
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	4b4e      	ldr	r3, [pc, #312]	@ (800772c <USBD_SetConfig+0x150>)
 80075f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075f4:	4b4d      	ldr	r3, [pc, #308]	@ (800772c <USBD_SetConfig+0x150>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d905      	bls.n	8007608 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f985 	bl	800790e <USBD_CtlError>
    return USBD_FAIL;
 8007604:	2303      	movs	r3, #3
 8007606:	e08c      	b.n	8007722 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d002      	beq.n	800761a <USBD_SetConfig+0x3e>
 8007614:	2b03      	cmp	r3, #3
 8007616:	d029      	beq.n	800766c <USBD_SetConfig+0x90>
 8007618:	e075      	b.n	8007706 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800761a:	4b44      	ldr	r3, [pc, #272]	@ (800772c <USBD_SetConfig+0x150>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d020      	beq.n	8007664 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007622:	4b42      	ldr	r3, [pc, #264]	@ (800772c <USBD_SetConfig+0x150>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800762c:	4b3f      	ldr	r3, [pc, #252]	@ (800772c <USBD_SetConfig+0x150>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fe ffe3 	bl	80065fe <USBD_SetClassConfig>
 8007638:	4603      	mov	r3, r0
 800763a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d008      	beq.n	8007654 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f962 	bl	800790e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007652:	e065      	b.n	8007720 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fa25 	bl	8007aa4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2203      	movs	r2, #3
 800765e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007662:	e05d      	b.n	8007720 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fa1d 	bl	8007aa4 <USBD_CtlSendStatus>
      break;
 800766a:	e059      	b.n	8007720 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800766c:	4b2f      	ldr	r3, [pc, #188]	@ (800772c <USBD_SetConfig+0x150>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d112      	bne.n	800769a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800767c:	4b2b      	ldr	r3, [pc, #172]	@ (800772c <USBD_SetConfig+0x150>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007686:	4b29      	ldr	r3, [pc, #164]	@ (800772c <USBD_SetConfig+0x150>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7fe ffd2 	bl	8006636 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa06 	bl	8007aa4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007698:	e042      	b.n	8007720 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800769a:	4b24      	ldr	r3, [pc, #144]	@ (800772c <USBD_SetConfig+0x150>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d02a      	beq.n	80076fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7fe ffc0 	bl	8006636 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80076b6:	4b1d      	ldr	r3, [pc, #116]	@ (800772c <USBD_SetConfig+0x150>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076c0:	4b1a      	ldr	r3, [pc, #104]	@ (800772c <USBD_SetConfig+0x150>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fe ff99 	bl	80065fe <USBD_SetClassConfig>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00f      	beq.n	80076f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f918 	bl	800790e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fe ffa5 	bl	8006636 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80076f4:	e014      	b.n	8007720 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f9d4 	bl	8007aa4 <USBD_CtlSendStatus>
      break;
 80076fc:	e010      	b.n	8007720 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f9d0 	bl	8007aa4 <USBD_CtlSendStatus>
      break;
 8007704:	e00c      	b.n	8007720 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f900 	bl	800790e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800770e:	4b07      	ldr	r3, [pc, #28]	@ (800772c <USBD_SetConfig+0x150>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7fe ff8e 	bl	8006636 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800771a:	2303      	movs	r3, #3
 800771c:	73fb      	strb	r3, [r7, #15]
      break;
 800771e:	bf00      	nop
  }

  return ret;
 8007720:	7bfb      	ldrb	r3, [r7, #15]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	2000024c 	.word	0x2000024c

08007730 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	88db      	ldrh	r3, [r3, #6]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d004      	beq.n	800774c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f8e2 	bl	800790e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800774a:	e023      	b.n	8007794 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	dc02      	bgt.n	800775e <USBD_GetConfig+0x2e>
 8007758:	2b00      	cmp	r3, #0
 800775a:	dc03      	bgt.n	8007764 <USBD_GetConfig+0x34>
 800775c:	e015      	b.n	800778a <USBD_GetConfig+0x5a>
 800775e:	2b03      	cmp	r3, #3
 8007760:	d00b      	beq.n	800777a <USBD_GetConfig+0x4a>
 8007762:	e012      	b.n	800778a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3308      	adds	r3, #8
 800776e:	2201      	movs	r2, #1
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f93c 	bl	80079f0 <USBD_CtlSendData>
        break;
 8007778:	e00c      	b.n	8007794 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3304      	adds	r3, #4
 800777e:	2201      	movs	r2, #1
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f934 	bl	80079f0 <USBD_CtlSendData>
        break;
 8007788:	e004      	b.n	8007794 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f8be 	bl	800790e <USBD_CtlError>
        break;
 8007792:	bf00      	nop
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	3b01      	subs	r3, #1
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d81e      	bhi.n	80077f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	88db      	ldrh	r3, [r3, #6]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d004      	beq.n	80077c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f8a5 	bl	800790e <USBD_CtlError>
        break;
 80077c4:	e01a      	b.n	80077fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d005      	beq.n	80077e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f043 0202 	orr.w	r2, r3, #2
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	330c      	adds	r3, #12
 80077e6:	2202      	movs	r2, #2
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f900 	bl	80079f0 <USBD_CtlSendData>
      break;
 80077f0:	e004      	b.n	80077fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f88a 	bl	800790e <USBD_CtlError>
      break;
 80077fa:	bf00      	nop
  }
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	885b      	ldrh	r3, [r3, #2]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d107      	bne.n	8007826 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f940 	bl	8007aa4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007824:	e013      	b.n	800784e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	885b      	ldrh	r3, [r3, #2]
 800782a:	2b02      	cmp	r3, #2
 800782c:	d10b      	bne.n	8007846 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	889b      	ldrh	r3, [r3, #4]
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	b29b      	uxth	r3, r3
 8007836:	b2da      	uxtb	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f930 	bl	8007aa4 <USBD_CtlSendStatus>
}
 8007844:	e003      	b.n	800784e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f860 	bl	800790e <USBD_CtlError>
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007866:	b2db      	uxtb	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	2b02      	cmp	r3, #2
 800786c:	d80b      	bhi.n	8007886 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	885b      	ldrh	r3, [r3, #2]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d10c      	bne.n	8007890 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f910 	bl	8007aa4 <USBD_CtlSendStatus>
      }
      break;
 8007884:	e004      	b.n	8007890 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f840 	bl	800790e <USBD_CtlError>
      break;
 800788e:	e000      	b.n	8007892 <USBD_ClrFeature+0x3c>
      break;
 8007890:	bf00      	nop
  }
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	781a      	ldrb	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3301      	adds	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	781a      	ldrb	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3301      	adds	r3, #1
 80078c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f7ff fa40 	bl	8006d4a <SWAPBYTE>
 80078ca:	4603      	mov	r3, r0
 80078cc:	461a      	mov	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3301      	adds	r3, #1
 80078dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7ff fa33 	bl	8006d4a <SWAPBYTE>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3301      	adds	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3301      	adds	r3, #1
 80078f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff fa26 	bl	8006d4a <SWAPBYTE>
 80078fe:	4603      	mov	r3, r0
 8007900:	461a      	mov	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	80da      	strh	r2, [r3, #6]
}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007918:	2180      	movs	r1, #128	@ 0x80
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fcc6 	bl	80082ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007920:	2100      	movs	r1, #0
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fcc2 	bl	80082ac <USBD_LL_StallEP>
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d036      	beq.n	80079b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800794a:	6938      	ldr	r0, [r7, #16]
 800794c:	f000 f836 	bl	80079bc <USBD_GetLen>
 8007950:	4603      	mov	r3, r0
 8007952:	3301      	adds	r3, #1
 8007954:	b29b      	uxth	r3, r3
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	b29a      	uxth	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800795e:	7dfb      	ldrb	r3, [r7, #23]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	4413      	add	r3, r2
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	701a      	strb	r2, [r3, #0]
  idx++;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	3301      	adds	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	4413      	add	r3, r2
 8007976:	2203      	movs	r2, #3
 8007978:	701a      	strb	r2, [r3, #0]
  idx++;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	3301      	adds	r3, #1
 800797e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007980:	e013      	b.n	80079aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	4413      	add	r3, r2
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	7812      	ldrb	r2, [r2, #0]
 800798c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	3301      	adds	r3, #1
 8007992:	613b      	str	r3, [r7, #16]
    idx++;
 8007994:	7dfb      	ldrb	r3, [r7, #23]
 8007996:	3301      	adds	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	4413      	add	r3, r2
 80079a0:	2200      	movs	r2, #0
 80079a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	3301      	adds	r3, #1
 80079a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e7      	bne.n	8007982 <USBD_GetString+0x52>
 80079b2:	e000      	b.n	80079b6 <USBD_GetString+0x86>
    return;
 80079b4:	bf00      	nop
  }
}
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80079cc:	e005      	b.n	80079da <USBD_GetLen+0x1e>
  {
    len++;
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	3301      	adds	r3, #1
 80079d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	3301      	adds	r3, #1
 80079d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f5      	bne.n	80079ce <USBD_GetLen+0x12>
  }

  return len;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	2100      	movs	r1, #0
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fcd1 	bl	80083be <USBD_LL_Transmit>

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	2100      	movs	r1, #0
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fcc0 	bl	80083be <USBD_LL_Transmit>

  return USBD_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2203      	movs	r2, #3
 8007a58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	2100      	movs	r1, #0
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 fcc4 	bl	8008400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	2100      	movs	r1, #0
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fcb3 	bl	8008400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2204      	movs	r2, #4
 8007ab0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2100      	movs	r1, #0
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fc7f 	bl	80083be <USBD_LL_Transmit>

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2205      	movs	r2, #5
 8007ad6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ada:	2300      	movs	r3, #0
 8007adc:	2200      	movs	r2, #0
 8007ade:	2100      	movs	r1, #0
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fc8d 	bl	8008400 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007af4:	2200      	movs	r2, #0
 8007af6:	4912      	ldr	r1, [pc, #72]	@ (8007b40 <MX_USB_DEVICE_Init+0x50>)
 8007af8:	4812      	ldr	r0, [pc, #72]	@ (8007b44 <MX_USB_DEVICE_Init+0x54>)
 8007afa:	f7fe fd03 	bl	8006504 <USBD_Init>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b04:	f7f8 ffec 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b08:	490f      	ldr	r1, [pc, #60]	@ (8007b48 <MX_USB_DEVICE_Init+0x58>)
 8007b0a:	480e      	ldr	r0, [pc, #56]	@ (8007b44 <MX_USB_DEVICE_Init+0x54>)
 8007b0c:	f7fe fd2a 	bl	8006564 <USBD_RegisterClass>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b16:	f7f8 ffe3 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b1a:	490c      	ldr	r1, [pc, #48]	@ (8007b4c <MX_USB_DEVICE_Init+0x5c>)
 8007b1c:	4809      	ldr	r0, [pc, #36]	@ (8007b44 <MX_USB_DEVICE_Init+0x54>)
 8007b1e:	f7fe fc21 	bl	8006364 <USBD_CDC_RegisterInterface>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b28:	f7f8 ffda 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b2c:	4805      	ldr	r0, [pc, #20]	@ (8007b44 <MX_USB_DEVICE_Init+0x54>)
 8007b2e:	f7fe fd4f 	bl	80065d0 <USBD_Start>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b38:	f7f8 ffd2 	bl	8000ae0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b3c:	bf00      	nop
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	200000ac 	.word	0x200000ac
 8007b44:	20000250 	.word	0x20000250
 8007b48:	20000018 	.word	0x20000018
 8007b4c:	20000098 	.word	0x20000098

08007b50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b54:	2200      	movs	r2, #0
 8007b56:	4905      	ldr	r1, [pc, #20]	@ (8007b6c <CDC_Init_FS+0x1c>)
 8007b58:	4805      	ldr	r0, [pc, #20]	@ (8007b70 <CDC_Init_FS+0x20>)
 8007b5a:	f7fe fc1d 	bl	8006398 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b5e:	4905      	ldr	r1, [pc, #20]	@ (8007b74 <CDC_Init_FS+0x24>)
 8007b60:	4803      	ldr	r0, [pc, #12]	@ (8007b70 <CDC_Init_FS+0x20>)
 8007b62:	f7fe fc3b 	bl	80063dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	20000d2c 	.word	0x20000d2c
 8007b70:	20000250 	.word	0x20000250
 8007b74:	2000052c 	.word	0x2000052c

08007b78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6039      	str	r1, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
 8007b94:	4613      	mov	r3, r2
 8007b96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	2b23      	cmp	r3, #35	@ 0x23
 8007b9c:	d84a      	bhi.n	8007c34 <CDC_Control_FS+0xac>
 8007b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <CDC_Control_FS+0x1c>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007c35 	.word	0x08007c35
 8007ba8:	08007c35 	.word	0x08007c35
 8007bac:	08007c35 	.word	0x08007c35
 8007bb0:	08007c35 	.word	0x08007c35
 8007bb4:	08007c35 	.word	0x08007c35
 8007bb8:	08007c35 	.word	0x08007c35
 8007bbc:	08007c35 	.word	0x08007c35
 8007bc0:	08007c35 	.word	0x08007c35
 8007bc4:	08007c35 	.word	0x08007c35
 8007bc8:	08007c35 	.word	0x08007c35
 8007bcc:	08007c35 	.word	0x08007c35
 8007bd0:	08007c35 	.word	0x08007c35
 8007bd4:	08007c35 	.word	0x08007c35
 8007bd8:	08007c35 	.word	0x08007c35
 8007bdc:	08007c35 	.word	0x08007c35
 8007be0:	08007c35 	.word	0x08007c35
 8007be4:	08007c35 	.word	0x08007c35
 8007be8:	08007c35 	.word	0x08007c35
 8007bec:	08007c35 	.word	0x08007c35
 8007bf0:	08007c35 	.word	0x08007c35
 8007bf4:	08007c35 	.word	0x08007c35
 8007bf8:	08007c35 	.word	0x08007c35
 8007bfc:	08007c35 	.word	0x08007c35
 8007c00:	08007c35 	.word	0x08007c35
 8007c04:	08007c35 	.word	0x08007c35
 8007c08:	08007c35 	.word	0x08007c35
 8007c0c:	08007c35 	.word	0x08007c35
 8007c10:	08007c35 	.word	0x08007c35
 8007c14:	08007c35 	.word	0x08007c35
 8007c18:	08007c35 	.word	0x08007c35
 8007c1c:	08007c35 	.word	0x08007c35
 8007c20:	08007c35 	.word	0x08007c35
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c35 	.word	0x08007c35
 8007c2c:	08007c35 	.word	0x08007c35
 8007c30:	08007c35 	.word	0x08007c35
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c34:	bf00      	nop
  }

  return (USBD_OK);
 8007c36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4805      	ldr	r0, [pc, #20]	@ (8007c68 <CDC_Receive_FS+0x24>)
 8007c52:	f7fe fbc3 	bl	80063dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c56:	4804      	ldr	r0, [pc, #16]	@ (8007c68 <CDC_Receive_FS+0x24>)
 8007c58:	f7fe fc1e 	bl	8006498 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20000250 	.word	0x20000250

08007c6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb4 <CDC_Transmit_FS+0x48>)
 8007c7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e00b      	b.n	8007caa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007c92:	887b      	ldrh	r3, [r7, #2]
 8007c94:	461a      	mov	r2, r3
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	4806      	ldr	r0, [pc, #24]	@ (8007cb4 <CDC_Transmit_FS+0x48>)
 8007c9a:	f7fe fb7d 	bl	8006398 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007c9e:	4805      	ldr	r0, [pc, #20]	@ (8007cb4 <CDC_Transmit_FS+0x48>)
 8007ca0:	f7fe fbba 	bl	8006418 <USBD_CDC_TransmitPacket>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000250 	.word	0x20000250

08007cb8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
	...

08007cdc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	6039      	str	r1, [r7, #0]
 8007ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2212      	movs	r2, #18
 8007cec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cee:	4b03      	ldr	r3, [pc, #12]	@ (8007cfc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	200000c8 	.word	0x200000c8

08007d00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	6039      	str	r1, [r7, #0]
 8007d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2204      	movs	r2, #4
 8007d10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d12:	4b03      	ldr	r3, [pc, #12]	@ (8007d20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	200000dc 	.word	0x200000dc

08007d24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	6039      	str	r1, [r7, #0]
 8007d2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d105      	bne.n	8007d42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4907      	ldr	r1, [pc, #28]	@ (8007d58 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d3a:	4808      	ldr	r0, [pc, #32]	@ (8007d5c <USBD_FS_ProductStrDescriptor+0x38>)
 8007d3c:	f7ff fdf8 	bl	8007930 <USBD_GetString>
 8007d40:	e004      	b.n	8007d4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	4904      	ldr	r1, [pc, #16]	@ (8007d58 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d46:	4805      	ldr	r0, [pc, #20]	@ (8007d5c <USBD_FS_ProductStrDescriptor+0x38>)
 8007d48:	f7ff fdf2 	bl	8007930 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d4c:	4b02      	ldr	r3, [pc, #8]	@ (8007d58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	2000152c 	.word	0x2000152c
 8007d5c:	08008570 	.word	0x08008570

08007d60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	6039      	str	r1, [r7, #0]
 8007d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	4904      	ldr	r1, [pc, #16]	@ (8007d80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d70:	4804      	ldr	r0, [pc, #16]	@ (8007d84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d72:	f7ff fddd 	bl	8007930 <USBD_GetString>
  return USBD_StrDesc;
 8007d76:	4b02      	ldr	r3, [pc, #8]	@ (8007d80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	2000152c 	.word	0x2000152c
 8007d84:	08008588 	.word	0x08008588

08007d88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	6039      	str	r1, [r7, #0]
 8007d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	221a      	movs	r2, #26
 8007d98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d9a:	f000 f843 	bl	8007e24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d9e:	4b02      	ldr	r3, [pc, #8]	@ (8007da8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	200000e0 	.word	0x200000e0

08007dac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	6039      	str	r1, [r7, #0]
 8007db6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d105      	bne.n	8007dca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	4907      	ldr	r1, [pc, #28]	@ (8007de0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dc2:	4808      	ldr	r0, [pc, #32]	@ (8007de4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dc4:	f7ff fdb4 	bl	8007930 <USBD_GetString>
 8007dc8:	e004      	b.n	8007dd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	4904      	ldr	r1, [pc, #16]	@ (8007de0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dce:	4805      	ldr	r0, [pc, #20]	@ (8007de4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dd0:	f7ff fdae 	bl	8007930 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dd4:	4b02      	ldr	r3, [pc, #8]	@ (8007de0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	2000152c 	.word	0x2000152c
 8007de4:	0800859c 	.word	0x0800859c

08007de8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	6039      	str	r1, [r7, #0]
 8007df2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d105      	bne.n	8007e06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	4907      	ldr	r1, [pc, #28]	@ (8007e1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dfe:	4808      	ldr	r0, [pc, #32]	@ (8007e20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e00:	f7ff fd96 	bl	8007930 <USBD_GetString>
 8007e04:	e004      	b.n	8007e10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	4904      	ldr	r1, [pc, #16]	@ (8007e1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e0a:	4805      	ldr	r0, [pc, #20]	@ (8007e20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e0c:	f7ff fd90 	bl	8007930 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e10:	4b02      	ldr	r3, [pc, #8]	@ (8007e1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	2000152c 	.word	0x2000152c
 8007e20:	080085a8 	.word	0x080085a8

08007e24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	4413      	add	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d009      	beq.n	8007e4c <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e38:	2208      	movs	r2, #8
 8007e3a:	4906      	ldr	r1, [pc, #24]	@ (8007e54 <Get_SerialNum+0x30>)
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 f80d 	bl	8007e5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e42:	2204      	movs	r2, #4
 8007e44:	4904      	ldr	r1, [pc, #16]	@ (8007e58 <Get_SerialNum+0x34>)
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f808 	bl	8007e5c <IntToUnicode>
  }
}
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	200000e2 	.word	0x200000e2
 8007e58:	200000f2 	.word	0x200000f2

08007e5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	4613      	mov	r3, r2
 8007e68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	75fb      	strb	r3, [r7, #23]
 8007e72:	e027      	b.n	8007ec4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	0f1b      	lsrs	r3, r3, #28
 8007e78:	2b09      	cmp	r3, #9
 8007e7a:	d80b      	bhi.n	8007e94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	0f1b      	lsrs	r3, r3, #28
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	4619      	mov	r1, r3
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	440b      	add	r3, r1
 8007e8c:	3230      	adds	r2, #48	@ 0x30
 8007e8e:	b2d2      	uxtb	r2, r2
 8007e90:	701a      	strb	r2, [r3, #0]
 8007e92:	e00a      	b.n	8007eaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	0f1b      	lsrs	r3, r3, #28
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	440b      	add	r3, r1
 8007ea4:	3237      	adds	r2, #55	@ 0x37
 8007ea6:	b2d2      	uxtb	r2, r2
 8007ea8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4413      	add	r3, r2
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	75fb      	strb	r3, [r7, #23]
 8007ec4:	7dfa      	ldrb	r2, [r7, #23]
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d3d3      	bcc.n	8007e74 <IntToUnicode+0x18>
  }
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
	...

08007edc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b08a      	sub	sp, #40	@ 0x28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ee4:	f107 0314 	add.w	r3, r7, #20
 8007ee8:	2200      	movs	r2, #0
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	605a      	str	r2, [r3, #4]
 8007eee:	609a      	str	r2, [r3, #8]
 8007ef0:	60da      	str	r2, [r3, #12]
 8007ef2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007efc:	d13a      	bne.n	8007f74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007efe:	2300      	movs	r3, #0
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	4b1e      	ldr	r3, [pc, #120]	@ (8007f7c <HAL_PCD_MspInit+0xa0>)
 8007f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f06:	4a1d      	ldr	r2, [pc, #116]	@ (8007f7c <HAL_PCD_MspInit+0xa0>)
 8007f08:	f043 0301 	orr.w	r3, r3, #1
 8007f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8007f7c <HAL_PCD_MspInit+0xa0>)
 8007f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	613b      	str	r3, [r7, #16]
 8007f18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f1a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f20:	2302      	movs	r3, #2
 8007f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f24:	2300      	movs	r3, #0
 8007f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f2c:	230a      	movs	r3, #10
 8007f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f30:	f107 0314 	add.w	r3, r7, #20
 8007f34:	4619      	mov	r1, r3
 8007f36:	4812      	ldr	r0, [pc, #72]	@ (8007f80 <HAL_PCD_MspInit+0xa4>)
 8007f38:	f7f9 fbb0 	bl	800169c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8007f7c <HAL_PCD_MspInit+0xa0>)
 8007f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f40:	4a0e      	ldr	r2, [pc, #56]	@ (8007f7c <HAL_PCD_MspInit+0xa0>)
 8007f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f46:	6353      	str	r3, [r2, #52]	@ 0x34
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f7c <HAL_PCD_MspInit+0xa0>)
 8007f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f50:	4a0a      	ldr	r2, [pc, #40]	@ (8007f7c <HAL_PCD_MspInit+0xa0>)
 8007f52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f56:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f58:	4b08      	ldr	r3, [pc, #32]	@ (8007f7c <HAL_PCD_MspInit+0xa0>)
 8007f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f64:	2200      	movs	r2, #0
 8007f66:	2100      	movs	r1, #0
 8007f68:	2043      	movs	r0, #67	@ 0x43
 8007f6a:	f7f9 fb60 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f6e:	2043      	movs	r0, #67	@ 0x43
 8007f70:	f7f9 fb79 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f74:	bf00      	nop
 8007f76:	3728      	adds	r7, #40	@ 0x28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	40023800 	.word	0x40023800
 8007f80:	40020000 	.word	0x40020000

08007f84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f7fe fb65 	bl	800666a <USBD_LL_SetupStage>
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	78fb      	ldrb	r3, [r7, #3]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f7fe fb9f 	bl	8006714 <USBD_LL_DataOutStage>
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007ff0:	78fa      	ldrb	r2, [r7, #3]
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	3320      	adds	r3, #32
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	78fb      	ldrb	r3, [r7, #3]
 8008004:	4619      	mov	r1, r3
 8008006:	f7fe fc38 	bl	800687a <USBD_LL_DataInStage>
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008020:	4618      	mov	r0, r3
 8008022:	f7fe fd72 	bl	8006b0a <USBD_LL_SOF>
}
 8008026:	bf00      	nop
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008036:	2301      	movs	r3, #1
 8008038:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	79db      	ldrb	r3, [r3, #7]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d001      	beq.n	8008046 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008042:	f7f8 fd4d 	bl	8000ae0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800804c:	7bfa      	ldrb	r2, [r7, #15]
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f7fe fd16 	bl	8006a82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800805c:	4618      	mov	r0, r3
 800805e:	f7fe fcbe 	bl	80069de <USBD_LL_Reset>
}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800807a:	4618      	mov	r0, r3
 800807c:	f7fe fd11 	bl	8006aa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6812      	ldr	r2, [r2, #0]
 800808e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008092:	f043 0301 	orr.w	r3, r3, #1
 8008096:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7adb      	ldrb	r3, [r3, #11]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d005      	beq.n	80080ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080a0:	4b04      	ldr	r3, [pc, #16]	@ (80080b4 <HAL_PCD_SuspendCallback+0x48>)
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	4a03      	ldr	r2, [pc, #12]	@ (80080b4 <HAL_PCD_SuspendCallback+0x48>)
 80080a6:	f043 0306 	orr.w	r3, r3, #6
 80080aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	e000ed00 	.word	0xe000ed00

080080b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe fd07 	bl	8006ada <USBD_LL_Resume>
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080e6:	78fa      	ldrb	r2, [r7, #3]
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe fd5f 	bl	8006bae <USBD_LL_IsoOUTIncomplete>
}
 80080f0:	bf00      	nop
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800810a:	78fa      	ldrb	r2, [r7, #3]
 800810c:	4611      	mov	r1, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe fd1b 	bl	8006b4a <USBD_LL_IsoINIncomplete>
}
 8008114:	bf00      	nop
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe fd71 	bl	8006c12 <USBD_LL_DevConnected>
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe fd6e 	bl	8006c28 <USBD_LL_DevDisconnected>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d13c      	bne.n	80081de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008164:	4a20      	ldr	r2, [pc, #128]	@ (80081e8 <USBD_LL_Init+0x94>)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a1e      	ldr	r2, [pc, #120]	@ (80081e8 <USBD_LL_Init+0x94>)
 8008170:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008174:	4b1c      	ldr	r3, [pc, #112]	@ (80081e8 <USBD_LL_Init+0x94>)
 8008176:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800817a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800817c:	4b1a      	ldr	r3, [pc, #104]	@ (80081e8 <USBD_LL_Init+0x94>)
 800817e:	2204      	movs	r2, #4
 8008180:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008182:	4b19      	ldr	r3, [pc, #100]	@ (80081e8 <USBD_LL_Init+0x94>)
 8008184:	2202      	movs	r2, #2
 8008186:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008188:	4b17      	ldr	r3, [pc, #92]	@ (80081e8 <USBD_LL_Init+0x94>)
 800818a:	2200      	movs	r2, #0
 800818c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800818e:	4b16      	ldr	r3, [pc, #88]	@ (80081e8 <USBD_LL_Init+0x94>)
 8008190:	2202      	movs	r2, #2
 8008192:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008194:	4b14      	ldr	r3, [pc, #80]	@ (80081e8 <USBD_LL_Init+0x94>)
 8008196:	2200      	movs	r2, #0
 8008198:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800819a:	4b13      	ldr	r3, [pc, #76]	@ (80081e8 <USBD_LL_Init+0x94>)
 800819c:	2200      	movs	r2, #0
 800819e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80081a0:	4b11      	ldr	r3, [pc, #68]	@ (80081e8 <USBD_LL_Init+0x94>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80081a6:	4b10      	ldr	r3, [pc, #64]	@ (80081e8 <USBD_LL_Init+0x94>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80081ac:	4b0e      	ldr	r3, [pc, #56]	@ (80081e8 <USBD_LL_Init+0x94>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80081b2:	480d      	ldr	r0, [pc, #52]	@ (80081e8 <USBD_LL_Init+0x94>)
 80081b4:	f7f9 fc0f 	bl	80019d6 <HAL_PCD_Init>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80081be:	f7f8 fc8f 	bl	8000ae0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80081c2:	2180      	movs	r1, #128	@ 0x80
 80081c4:	4808      	ldr	r0, [pc, #32]	@ (80081e8 <USBD_LL_Init+0x94>)
 80081c6:	f7fa fe3a 	bl	8002e3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80081ca:	2240      	movs	r2, #64	@ 0x40
 80081cc:	2100      	movs	r1, #0
 80081ce:	4806      	ldr	r0, [pc, #24]	@ (80081e8 <USBD_LL_Init+0x94>)
 80081d0:	f7fa fdee 	bl	8002db0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80081d4:	2280      	movs	r2, #128	@ 0x80
 80081d6:	2101      	movs	r1, #1
 80081d8:	4803      	ldr	r0, [pc, #12]	@ (80081e8 <USBD_LL_Init+0x94>)
 80081da:	f7fa fde9 	bl	8002db0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	2000172c 	.word	0x2000172c

080081ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008202:	4618      	mov	r0, r3
 8008204:	f7f9 fcf6 	bl	8001bf4 <HAL_PCD_Start>
 8008208:	4603      	mov	r3, r0
 800820a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	4618      	mov	r0, r3
 8008210:	f000 f942 	bl	8008498 <USBD_Get_USB_Status>
 8008214:	4603      	mov	r3, r0
 8008216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008218:	7bbb      	ldrb	r3, [r7, #14]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	4608      	mov	r0, r1
 800822c:	4611      	mov	r1, r2
 800822e:	461a      	mov	r2, r3
 8008230:	4603      	mov	r3, r0
 8008232:	70fb      	strb	r3, [r7, #3]
 8008234:	460b      	mov	r3, r1
 8008236:	70bb      	strb	r3, [r7, #2]
 8008238:	4613      	mov	r3, r2
 800823a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800824a:	78bb      	ldrb	r3, [r7, #2]
 800824c:	883a      	ldrh	r2, [r7, #0]
 800824e:	78f9      	ldrb	r1, [r7, #3]
 8008250:	f7fa f9ca 	bl	80025e8 <HAL_PCD_EP_Open>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	4618      	mov	r0, r3
 800825c:	f000 f91c 	bl	8008498 <USBD_Get_USB_Status>
 8008260:	4603      	mov	r3, r0
 8008262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008264:	7bbb      	ldrb	r3, [r7, #14]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008288:	78fa      	ldrb	r2, [r7, #3]
 800828a:	4611      	mov	r1, r2
 800828c:	4618      	mov	r0, r3
 800828e:	f7fa fa13 	bl	80026b8 <HAL_PCD_EP_Close>
 8008292:	4603      	mov	r3, r0
 8008294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008296:	7bfb      	ldrb	r3, [r7, #15]
 8008298:	4618      	mov	r0, r3
 800829a:	f000 f8fd 	bl	8008498 <USBD_Get_USB_Status>
 800829e:	4603      	mov	r3, r0
 80082a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	4611      	mov	r1, r2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fa facb 	bl	8002866 <HAL_PCD_EP_SetStall>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f8de 	bl	8008498 <USBD_Get_USB_Status>
 80082dc:	4603      	mov	r3, r0
 80082de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008304:	78fa      	ldrb	r2, [r7, #3]
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f7fa fb0f 	bl	800292c <HAL_PCD_EP_ClrStall>
 800830e:	4603      	mov	r3, r0
 8008310:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	4618      	mov	r0, r3
 8008316:	f000 f8bf 	bl	8008498 <USBD_Get_USB_Status>
 800831a:	4603      	mov	r3, r0
 800831c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800831e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800833a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800833c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008340:	2b00      	cmp	r3, #0
 8008342:	da0b      	bge.n	800835c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800834a:	68f9      	ldr	r1, [r7, #12]
 800834c:	4613      	mov	r3, r2
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	4413      	add	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	440b      	add	r3, r1
 8008356:	3316      	adds	r3, #22
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	e00b      	b.n	8008374 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800835c:	78fb      	ldrb	r3, [r7, #3]
 800835e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008362:	68f9      	ldr	r1, [r7, #12]
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008372:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008374:	4618      	mov	r0, r3
 8008376:	3714      	adds	r7, #20
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800839a:	78fa      	ldrb	r2, [r7, #3]
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fa f8fe 	bl	80025a0 <HAL_PCD_SetAddress>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 f874 	bl	8008498 <USBD_Get_USB_Status>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b086      	sub	sp, #24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	460b      	mov	r3, r1
 80083cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80083dc:	7af9      	ldrb	r1, [r7, #11]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	f7fa fa06 	bl	80027f2 <HAL_PCD_EP_Transmit>
 80083e6:	4603      	mov	r3, r0
 80083e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 f853 	bl	8008498 <USBD_Get_USB_Status>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	607a      	str	r2, [r7, #4]
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	460b      	mov	r3, r1
 800840e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800841e:	7af9      	ldrb	r1, [r7, #11]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	f7fa f992 	bl	800274c <HAL_PCD_EP_Receive>
 8008428:	4603      	mov	r3, r0
 800842a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f832 	bl	8008498 <USBD_Get_USB_Status>
 8008434:	4603      	mov	r3, r0
 8008436:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008438:	7dbb      	ldrb	r3, [r7, #22]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008454:	78fa      	ldrb	r2, [r7, #3]
 8008456:	4611      	mov	r1, r2
 8008458:	4618      	mov	r0, r3
 800845a:	f7fa f9b2 	bl	80027c2 <HAL_PCD_EP_GetRxCount>
 800845e:	4603      	mov	r3, r0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008470:	4b03      	ldr	r3, [pc, #12]	@ (8008480 <USBD_static_malloc+0x18>)
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	20001c10 	.word	0x20001c10

08008484 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]

}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d817      	bhi.n	80084dc <USBD_Get_USB_Status+0x44>
 80084ac:	a201      	add	r2, pc, #4	@ (adr r2, 80084b4 <USBD_Get_USB_Status+0x1c>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	080084c5 	.word	0x080084c5
 80084b8:	080084cb 	.word	0x080084cb
 80084bc:	080084d1 	.word	0x080084d1
 80084c0:	080084d7 	.word	0x080084d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
    break;
 80084c8:	e00b      	b.n	80084e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084ca:	2303      	movs	r3, #3
 80084cc:	73fb      	strb	r3, [r7, #15]
    break;
 80084ce:	e008      	b.n	80084e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084d0:	2301      	movs	r3, #1
 80084d2:	73fb      	strb	r3, [r7, #15]
    break;
 80084d4:	e005      	b.n	80084e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084d6:	2303      	movs	r3, #3
 80084d8:	73fb      	strb	r3, [r7, #15]
    break;
 80084da:	e002      	b.n	80084e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80084dc:	2303      	movs	r3, #3
 80084de:	73fb      	strb	r3, [r7, #15]
    break;
 80084e0:	bf00      	nop
  }
  return usb_status;
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <memset>:
 80084f0:	4402      	add	r2, r0
 80084f2:	4603      	mov	r3, r0
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d100      	bne.n	80084fa <memset+0xa>
 80084f8:	4770      	bx	lr
 80084fa:	f803 1b01 	strb.w	r1, [r3], #1
 80084fe:	e7f9      	b.n	80084f4 <memset+0x4>

08008500 <__libc_init_array>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	4d0d      	ldr	r5, [pc, #52]	@ (8008538 <__libc_init_array+0x38>)
 8008504:	4c0d      	ldr	r4, [pc, #52]	@ (800853c <__libc_init_array+0x3c>)
 8008506:	1b64      	subs	r4, r4, r5
 8008508:	10a4      	asrs	r4, r4, #2
 800850a:	2600      	movs	r6, #0
 800850c:	42a6      	cmp	r6, r4
 800850e:	d109      	bne.n	8008524 <__libc_init_array+0x24>
 8008510:	4d0b      	ldr	r5, [pc, #44]	@ (8008540 <__libc_init_array+0x40>)
 8008512:	4c0c      	ldr	r4, [pc, #48]	@ (8008544 <__libc_init_array+0x44>)
 8008514:	f000 f818 	bl	8008548 <_init>
 8008518:	1b64      	subs	r4, r4, r5
 800851a:	10a4      	asrs	r4, r4, #2
 800851c:	2600      	movs	r6, #0
 800851e:	42a6      	cmp	r6, r4
 8008520:	d105      	bne.n	800852e <__libc_init_array+0x2e>
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	f855 3b04 	ldr.w	r3, [r5], #4
 8008528:	4798      	blx	r3
 800852a:	3601      	adds	r6, #1
 800852c:	e7ee      	b.n	800850c <__libc_init_array+0xc>
 800852e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008532:	4798      	blx	r3
 8008534:	3601      	adds	r6, #1
 8008536:	e7f2      	b.n	800851e <__libc_init_array+0x1e>
 8008538:	080085d0 	.word	0x080085d0
 800853c:	080085d0 	.word	0x080085d0
 8008540:	080085d0 	.word	0x080085d0
 8008544:	080085d4 	.word	0x080085d4

08008548 <_init>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	bf00      	nop
 800854c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854e:	bc08      	pop	{r3}
 8008550:	469e      	mov	lr, r3
 8008552:	4770      	bx	lr

08008554 <_fini>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	bf00      	nop
 8008558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855a:	bc08      	pop	{r3}
 800855c:	469e      	mov	lr, r3
 800855e:	4770      	bx	lr
